{"meta":{"title":"KyleSun的个人博客","subtitle":"","description":"","author":"KyleSun","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"git常用指令","slug":"git常用指令","date":"2023-07-24T16:00:00.000Z","updated":"2023-07-25T07:58:30.770Z","comments":true,"path":"2023/07/25/git常用指令/","link":"","permalink":"http://example.com/2023/07/25/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/","excerpt":"","text":"一、基本操作指令git init：初始化一个新的Git仓库。 git add &lt;filename&gt;：将文件添加到Git索引中。 git commit -m &quot;Commit message&quot;：提交更改，并附上提交消息。 git status：查看当前Git仓库的状态。 二、分支管理指令git branch：列出所有分支。 git branch &lt;branchname&gt;：创建一个新的分支。 git branch -d &lt;branchname&gt;：删除指定的分支。 git branch -a：列出本地和远程所有分支。 git branch -m &lt;oldbranchname&gt; &lt;newbranchname&gt;：将指定的分支重命名。 git checkout &lt;branchname&gt;：切换到指定的分支。 git checkout -b &lt;branchname&gt;：创建一个新的分支，并切换到该分支。 git merge &lt;branchname&gt;：将指定分支合并到当前分支。 git push &lt;remote&gt; &lt;branch&gt;：将本地分支推送到远程分支。 git push &lt;remote&gt; :&lt;branchname&gt;：删除远程分支。 git pull &lt;remote&gt; &lt;branch&gt;：从远程分支拉取代码并合并到当前分支。 三、远程仓库指令git clone &lt;repository&gt;：从远程仓库克隆整个代码库到本地。 git remote add &lt;name&gt; &lt;url&gt;：将本地代码库与远程仓库进行关联。 git remote -v：显示所有已经与本地仓库关联的远程仓库信息。 git fetch &lt;remote&gt;：从远程仓库拉取最新的代码到本地，但不会自动合并。 git pull &lt;remote&gt; &lt;branch&gt;：从远程仓库拉取最新的代码到本地，并自动合并到当前分支。 git push &lt;remote&gt; &lt;branch&gt;：将本地的代码推送到远程仓库指定分支。 git remote show &lt;remote&gt;：显示指定远程仓库的详细信息，包括分支和标签等。 git remote rename &lt;oldname&gt; &lt;newname&gt;：将已经存在的远程仓库别名进行重命名。 git remote remove &lt;name&gt;：删除指定名称的远程仓库关联。 四、撤销操作指令在Git中，撤销操作包括撤销已提交的修改、撤销已经暂存的修改和取消已经执行的Git命令等。以下是一些常用的Git撤销操作指令： git checkout &lt;file&gt;：将指定文件恢复到上一次提交的状态，也可以使用 git checkout . 恢复所有文件。git reset &lt;file&gt;：将指定文件恢复到上一次未暂存的状态，也可以使用 git reset 恢复所有文件。git reset HEAD &lt;file&gt;：将指定文件从已暂存的状态中恢复到未暂存的状态。git revert &lt;commit&gt;：撤销指定的提交，生成一个新的提交以恢复先前的状态。git stash：将当前的修改暂存起来，以便稍后恢复。git stash pop：将最近一次暂存的修改还原回来，并将暂存的修改从堆栈中移除。git cherry-pick &lt;commit&gt;：将指定的提交合并到当前分支中。git commit --amend：修改上一次提交的信息 五、查看日志指令git log：查看Git仓库的提交历史。 git diff：查看文件的变更记录。 git log --graph：查看分支历史记录的图形表示。 六、其他操作指令.gitignore：忽略不需要跟踪的文件。 git tag &lt;tagname&gt;：创建一个新的标签。 git stash：将未提交的更改保存到一个临时的存储区，以便稍后恢复。","categories":[{"name":"工作","slug":"工作","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://example.com/tags/Git/"}]},{"title":"git基础教程","slug":"git基础教程","date":"2023-07-24T16:00:00.000Z","updated":"2023-07-25T07:58:09.388Z","comments":true,"path":"2023/07/25/git基础教程/","link":"","permalink":"http://example.com/2023/07/25/git%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/","excerpt":"","text":"一、安装Git首先，您需要安装Git。您可以从官方网站https://git-scm.com/downloads 下载安装程序，然后按照安装向导完成安装过程。 初始化仓库 要开始使用Git，您需要在您的计算机上创建一个Git仓库。要初始化一个新的Git仓库，请在命令行中导航到您的项目目录并运行以下命令： 1git init 这将在当前目录下创建一个新的Git仓库。 二、添加和提交文件一旦您的Git仓库被初始化，您可以将文件添加到Git中。要添加文件，请运行以下命令： 1git add &lt;filename&gt; 要提交添加的文件，请运行以下命令： 1git commit -m &quot;message&quot; 在提交时，您需要提供提交消息，以便其他开发人员了解您所做的更改。 三、查看历史记录要查看Git仓库的历史记录，请运行以下命令： 1git log 这将显示所有提交的历史记录，包括每个提交的作者，提交日期和提交消息。 四、分支管理Git还允许您创建和管理分支。分支是一个从主分支派生的副本，您可以在其中进行修改，而不会影响主分支。要创建分支，请运行以下命令： 1git branch &lt;branchname&gt; 要切换到新分支，请运行以下命令： 1git checkout &lt;branchname&gt; 在您完成对分支的更改后，您可以将其合并回主分支。要将分支合并到主分支，请运行以下命令： 1git merge &lt;branchname&gt; 这将把您对分支所做的更改合并到主分支中。 五、远程仓库最后，您可能需要将Git仓库与远程仓库（如GitHub）同步。要将您的本地仓库上传到远程仓库，请运行以下命令： 12git remote add origin &lt;remote repository URL&gt; git push origin master 这将把您的本地仓库与远程仓库同步，并将您的更改上传到远程仓库中。","categories":[{"name":"工作","slug":"工作","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://example.com/tags/Git/"}]},{"title":"git概述","slug":"git概述","date":"2023-07-24T16:00:00.000Z","updated":"2023-07-25T07:53:42.096Z","comments":true,"path":"2023/07/25/git概述/","link":"","permalink":"http://example.com/2023/07/25/git%E6%A6%82%E8%BF%B0/","excerpt":"","text":"一、四个工作区域在Git中，有四个不同的工作区域，分别是工作区（Working Directory）、暂存区（Index）、本地仓库（Local Repository）和远程仓库（Remote Repository）。 工作区（Working Directory）：指项目所在的目录，也就是用户直接进行文件修改和操作的地方。在工作区中可以进行任意修改、添加、删除等操作，但这些修改不会被记录到Git仓库中。 暂存区（Index）：暂存区是Git仓库中的一个虚拟区域，用于暂存将要提交的修改。通过 git add 命令将工作区中的修改添加到暂存区中，表示这些修改已经准备好被提交了。暂存区的目的是为了提供更加灵活的提交方式，允许用户将修改分成多个提交，以便更好地管理和控制项目的版本。 本地仓库（Local Repository）：本地仓库是存储着项目历史记录的数据库，包括了所有版本的提交和分支等信息。每个本地仓库都包含一个 .git 目录，该目录包含了所有的Git元数据，如对象库、分支、标签等信息。 远程仓库（Remote Repository）：远程仓库是存储着项目的一个备份，通常位于网络上的其他计算机或服务器上。远程仓库可以通过 git clone 命令进行克隆，或者通过 git remote 命令进行连接和管理。远程仓库允许多人协作开发同一个项目，通过推送（push）和拉取（pull）操作，可以在本地仓库和远程仓库之间进行同步。 这四个工作区域在Git中扮演着不同的角色和功能，通过它们的配合，可以实现对项目的版本控制、协作开发和代码管理等功能。 二、五种状态在Git中，一个文件可以处于以下5种状态之一： 未跟踪（Untracked）：文件没有被Git追踪，即没有在Git的版本控制下。 已修改（Modified）：文件已经被修改，但还没有被添加到Git的暂存区。 已暂存（Staged）：文件已经被添加到Git的暂存区，等待被提交到Git仓库中。 已提交（Committed）：文件已经被提交到Git仓库中，即已经保存到Git的历史记录中。 已忽略（Ignored）：文件被添加到了.gitignore文件中，Git会忽略这些文件，不会被追踪或提交到Git仓库中。 通过 git status 命令可以查看当前工作目录下文件的状态，以及跟踪和未跟踪的文件列表。根据文件的状态，可以使用不同的Git命令进行相应的操作，如 git add 将文件添加到暂存区，git commit 将文件提交到仓库中，git rm 删除文件等。","categories":[{"name":"工作","slug":"工作","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://example.com/tags/Git/"}]},{"title":"AOP","slug":"AOP","date":"2023-07-24T16:00:00.000Z","updated":"2023-07-26T01:23:19.599Z","comments":true,"path":"2023/07/25/AOP/","link":"","permalink":"http://example.com/2023/07/25/AOP/","excerpt":"","text":"一、什么是AOP AOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。 AOP技术恰恰相反，它利用一种称为”横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为”Aspect”，即切面。所谓”切面”，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。 使用”横切”技术，AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如权限认证、日志、事物。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。 二、核心概念1. 横切关注点对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点 2. 切面（aspect）（自定义Log类）将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为”Aspect”，即切面。例如打印日志。 3. 连接点（joinpoint）被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器 4. 切入点（pointcut）（需要打印Log的类）对连接点进行拦截的定义 5. 通知（advice）（Log类中的具体方法）所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类 6. 目标对象代理的目标对象 7. 织入（weave）将切面应用到目标对象并导致代理对象创建的过程 8. 引入（introduction）在不修改代码的前提下，引入可以在运行期为类动态地添加一些方法或字段 三、具体实现12345678910111213&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aop&lt;/artifactId&gt; &lt;version&gt;5.3.6&lt;/version&gt; &lt;scope&gt;compile&lt;/scope&gt;&lt;/dependency&gt; 四、配置切面、切入点、通知1. 通过spring.xml配置12345678public class TimeLog &#123; public void printLogBefore()&#123; System.out.println(&quot;====Before====&quot;); &#125; public void printLogAfter()&#123; System.out.println(&quot;=====After=====&quot;); &#125;&#125; 12345678910111213&lt;bean id=&quot;timeLog&quot; class=&quot;log.TimeLog&quot;/&gt;&lt;aop:config&gt; &lt;!--定义切面为TimeLog--&gt; &lt;aop:aspect ref=&quot;timeLog&quot;&gt; &lt;!--定义切入点为UserServiceImpl中的所有方法--&gt; &lt;aop:pointcut id=&quot;pointcut1&quot; expression=&quot;execution(* service.UserServiceImpl.*(..))&quot;/&gt; &lt;!--定义前置通知为TimeLog.printLogBefore()方法--&gt; &lt;aop:before method=&quot;printLogBefore&quot; pointcut-ref=&quot;pointcut1&quot;/&gt; &lt;!--定义后置通知为TimeLog.printLogAfter()方法--&gt; &lt;aop:after method=&quot;printLogAfter&quot; pointcut-ref=&quot;pointcut1&quot;/&gt; &lt;/aop:aspect&gt;&lt;/aop:config&gt; 2. 通过注解将类定义为切面123456789101112131415161718//方式2import org.aspectj.lang.annotation.After;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Before;@Aspectpublic class AnnotationLog &#123; @Before(value = &quot;execution(* service.UserServiceImpl.*(..))&quot;) public void beforeLog()&#123; System.out.println(&quot;beforeLog&quot;); &#125; @After(value = &quot;execution(* service.UserServiceImpl.*(..))&quot;) public void afterLog()&#123; System.out.println(&quot;afterLog&quot;); &#125;&#125; 3. 通过实现接口定义通知的类型 + xml配置123456789import org.springframework.aop.MethodBeforeAdvice;import java.lang.reflect.Method;public class PreLog implements MethodBeforeAdvice &#123; @Override public void before(Method method, Object[] args, Object target) throws Throwable &#123; System.out.println(&quot;这是log：&quot;+method.getName()); &#125;&#125; 1234567&lt;bean id=&quot;preLog&quot; class=&quot;log.PreLog&quot;/&gt;&lt;aop:config&gt; &lt;!--切入点：要执行log的地方--&gt; &lt;aop:pointcut id=&quot;pre&quot; expression=&quot;execution(* service.UserServiceImpl.*(..))&quot;/&gt; &lt;!--执行什么方法--&gt; &lt;aop:advisor advice-ref=&quot;preLog&quot; pointcut-ref=&quot;pre&quot;/&gt;&lt;/aop:config&gt;","categories":[{"name":"工作","slug":"工作","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C/"},{"name":"Spring","slug":"工作/Spring","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C/Spring/"}],"tags":[{"name":"Spring","slug":"Spring","permalink":"http://example.com/tags/Spring/"}]}],"categories":[{"name":"工作","slug":"工作","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C/"},{"name":"Spring","slug":"工作/Spring","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C/Spring/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://example.com/tags/Git/"},{"name":"Spring","slug":"Spring","permalink":"http://example.com/tags/Spring/"}]}