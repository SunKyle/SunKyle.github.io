<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vuex状态管理</title>
      <link href="/2023/10/31/10.%20Vuex%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
      <url>/2023/10/31/10.%20Vuex%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>Vuex（Vue.js 状态管理模式）是一个用于Vue.js应用程序的状态管理库，它有助于管理应用程序中的数据和状态。通过Vuex，您可以将应用程序的状态集中存储在一个地方，并通过一些规则来更改它。这有助于使您的应用程序更容易维护，并且对于大型应用程序来说特别有用。</p><h2 id="2-基础教程"><a href="#2-基础教程" class="headerlink" title="2. 基础教程"></a>2. 基础教程</h2><p><strong>1. 安装 Vuex</strong></p><p>首先，确保您的Vue.js应用程序已经安装和配置。然后，使用npm或yarn安装Vuex：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex</span><br></pre></td></tr></table></figure><p><strong>2. 创建Vuex Store</strong></p><p>在您的应用程序中创建一个Vuex store。通常，您会在一个名为store.js或index.js的文件中创建它。以下是一个示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">count</span>++</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">decrement</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">count</span>--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们创建了一个包含<code>state</code>和<code>mutations</code>的简单Vuex store。<code>state</code>用于存储应用程序的数据，<code>mutations</code>用于更改<code>state</code>中的数据。</p><p><strong>3. 在Vue组件中使用Vuex</strong></p><p>要在Vue组件中使用Vuex，您需要导入Vuex store并使用<code>this.$store</code>来访问状态和触发 mutations。以下是一个示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;Count: &#123;&#123; $store.state.count &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;increment&quot;&gt;Increment&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;decrement&quot;&gt;Decrement&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    increment() &#123;</span><br><span class="line">      this.$store.commit(&#x27;increment&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    decrement() &#123;</span><br><span class="line">      this.$store.commit(&#x27;decrement&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在上述代码中，我们使用<code>$store.state.count</code>来访问<code>count</code>状态，并使用<code>this.$store.commit</code>来触发<code>increment</code>和<code>decrement</code> mutations。</p><p><strong>4. 在根Vue实例中添加Vuex store</strong></p><p>最后，确保在根Vue实例中添加您的Vuex store：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span> <span class="comment">// 导入Vuex store</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  store <span class="comment">// 添加Vuex store</span></span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="3-核心概念"><a href="#3-核心概念" class="headerlink" title="3. 核心概念"></a>3. 核心概念</h2><h3 id="3-1-State（状态）"><a href="#3-1-State（状态）" class="headerlink" title="3.1 State（状态）"></a>3.1 State（状态）</h3><ul><li><p><strong>概念</strong>：State 是应用程序的数据源，它包含应用程序中**&#x3D;&#x3D;所有组件共享的数据&#x3D;&#x3D;**。State 通常存储在一个单一的对象中，代表应用程序的当前状态。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 Vuex store 中定义 state</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>辅助函数-MapState</p><p>​         <code>mapState</code> 是 Vuex 提供的辅助函数之一，用于将 Vuex store 中的状态映射到组件的计算属性中，以便在组件中直接访问这些状态。这有助于简化组件代码并提高代码的可读性。使用 <code>mapState</code>，你可以将 Vuex store 中的状态与组件的计算属性相关联，而无需手动编写计算属性来获取状态值。</p><ol><li><p><strong>导入 <code>mapState</code> 函数</strong>：在你的组件文件中，导入 <code>mapState</code> 函数以及需要映射到计算属性的状态。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//XXX.vue</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>将状态映射到计算属性</strong>：在组件的 <code>computed</code> 部分，使用 <code>mapState</code> 函数将需要的状态映射为计算属性。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// xxx.vue</span></span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  ...<span class="title function_">mapState</span>(&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="string">&#x27;count&#x27;</span>, <span class="comment">// 将 Vuex store 中的 &#x27;count&#x27; 映射为计算属性 &#x27;count&#x27;</span></span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;user&#x27;</span> <span class="comment">// 将 Vuex store 中的 &#x27;user&#x27; 映射为计算属性 &#x27;user&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们将 Vuex store 中的 ‘count’ 和 ‘user’ 映射为组件中的计算属性。</p></li><li><p><strong>在组件中使用映射后的计算属性</strong>：现在你可以在组件中直接访问映射后的计算属性。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">count</span>); <span class="comment">// 访问映射后的 &#x27;count&#x27; 计算属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">user</span>); <span class="comment">// 访问映射后的 &#x27;user&#x27; 计算属性</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="3-2-Getters（计算属性）"><a href="#3-2-Getters（计算属性）" class="headerlink" title="3.2 Getters（计算属性）"></a>3.2 Getters（计算属性）</h3><ul><li><p><strong>概念</strong>：Getters 允许您从 state 中派生出一些数据，而无需在多个组件中重复编写计算属性。它们可以被认为是状态的计算属性。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 Vuex store 中定义 getter</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">todos</span>: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;Learn Vue&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">&#x27;Use Vuex&#x27;</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    doneTodos (state) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">todos</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">todo</span> =&gt;</span> todo.<span class="property">done</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-3-Mutations（变更）"><a href="#3-3-Mutations（变更）" class="headerlink" title="3.3 Mutations（变更）"></a>3.3 Mutations（变更）</h3><ul><li><p><strong>概念</strong>：&#x3D;&#x3D;Mutations 是用来修改 state 的唯一途径&#x3D;&#x3D;。&#x3D;&#x3D;它们是同步函数&#x3D;&#x3D;，每个 mutation 都有一个字符串类型的事件类型和一个回调函数。通过 mutations，您可以跟踪状态的变化。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 Vuex store 中定义 mutation</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="attr">increment</span>: <span class="function">(<span class="params">state,参数</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在组件中提交 Mutations</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>, 参数) <span class="comment">// 增加计数器</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;decrement&#x27;</span>, 参数) <span class="comment">// 减少计数器</span></span><br></pre></td></tr></table></figure></li><li><p>辅助函数-MapMutations</p><p>​         <code>mapMutations</code> 是 Vuex 提供的一个辅助函数，用于将组件的方法映射到 Vuex 中的 mutations，以便在组件中调用 mutations 而无需显式地编写 <code>this.$store.commit</code>。<code>mapMutations</code> 函数可以将组件中的方法映射为调用 mutations，你可以在组件中像调用本地方法一样调用这些映射后的方法。</p><ol><li><p><strong>导入 <code>mapMutations</code> 函数</strong>：在你的组件文件中，导入 <code>mapMutations</code> 函数和需要映射的 mutations。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>将 mutations 映射到组件方法</strong>：在组件的 <code>methods</code> 中，使用 <code>mapMutations</code> 函数将需要的 mutations 映射为组件的方法。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="comment">//使用数组的方式</span></span><br><span class="line">  ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;increment&#x27;</span>, <span class="string">&#x27;decrement&#x27;</span>]),</span><br><span class="line">  <span class="comment">// 其他组件方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们将名为 ‘increment’ 和 ‘decrement’ 的 mutations 映射为组件方法。</p></li><li><p><strong>在组件中调用 mutations 方法</strong>：现在你可以在组件中调用映射后的方法来触发 mutations。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">increment</span>(); <span class="comment">// 调用名为 &#x27;increment&#x27; 的 mutation</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">decrement</span>(); <span class="comment">// 调用名为 &#x27;decrement&#x27; 的 mutation</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><blockquote><p>注：Mutations只能传递一个参数；若需要传递多个参数，可以通过传递对象或数组的方式。</p><p>V-model 不能绑定State，因为State中的值只能通过Mutations修改。</p></blockquote><h3 id="3-4-Actions（动作）"><a href="#3-4-Actions（动作）" class="headerlink" title="3.4 Actions（动作）"></a>3.4 Actions（动作）</h3><ul><li><p><strong>概念</strong>：&#x3D;&#x3D;Actions 用于执行异步操作&#x3D;&#x3D;，例如数据获取、API 调用等。&#x3D;&#x3D;它不能直接修改state，只能通过触发 mutations 来修改 state&#x3D;&#x3D;。Actions 本身也是函数，通常包含异步操作，最后再调用 mutations 来提交变更。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 Vuex store 中定义 action</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    incrementAsync (context) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        context.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>) <span class="comment">// 调用 Mutations 来增加计数器</span></span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在组件中提交一个 Action</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;incrementAsync&#x27;</span>) <span class="comment">// 调用 incrementAsync Action</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-5-Modules（模块）"><a href="#3-5-Modules（模块）" class="headerlink" title="3.5 Modules（模块）"></a>3.5 Modules（模块）</h3><ul><li><p><strong>概念</strong>：Modules 允许您将 Vuex store 分割成多个小模块。每个模块有自己的 state、getters、mutations 和 actions，以帮助管理大型应用程序的复杂状态。</p></li><li><p><strong>示例</strong>：</p><ol><li><p><strong>创建模块文件</strong>：在你的项目中创建一个模块文件（例如 <code>myModule.js</code>）来定义模块的 state、mutations、actions 和 getters。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myModule.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="comment">// 模块自己的状态</span></span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="comment">// 模块自己的mutations</span></span><br><span class="line">  <span class="title function_">increment</span>(<span class="params">state</span>) &#123;</span><br><span class="line">    state.<span class="property">count</span>++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">// 模块自己的actions</span></span><br><span class="line">  <span class="title function_">incrementAsync</span>(<span class="params">&#123; commit &#125;</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="comment">// 模块自己的getters</span></span><br><span class="line">  <span class="title function_">doubleCount</span>(<span class="params">state</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> state.<span class="property">count</span> * <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">  getters</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>在 Vuex 中注册模块</strong>：在你的 Vuex store 中注册模块，以便在应用程序中使用它。在你的 <code>store.js</code> 文件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//store.js文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> myModule <span class="keyword">from</span> <span class="string">&#x27;./myModule&#x27;</span>; <span class="comment">// 导入模块</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="comment">// 注册模块</span></span><br><span class="line">    myModule</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...其他配置</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure></li><li><p><strong>在组件中使用模块</strong>：在你的组件中，可以通过模块名称访问模块的状态、mutations、actions 和 getters。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从模块中获取状态</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">myModule</span>.<span class="property">count</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用模块中的mutation</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;myModule/increment&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用模块中的action</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;myModule/incrementAsync&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从模块中获取getter</span></span><br><span class="line"><span class="keyword">const</span> doubleCount = <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;myModule/doubleCount&#x27;</span>];</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="3-6-Store（仓库）"><a href="#3-6-Store（仓库）" class="headerlink" title="3.6 Store（仓库）"></a>3.6 Store（仓库）</h3><ul><li><p><strong>概念</strong>：Store 是应用程序状态的单一源头，包含 state、getters、mutations、actions 和 modules。一个应用程序通常只有一个 store，可以在根 Vue 实例中导入和使用。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 Vuex store</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; <span class="attr">increment</span>: <span class="function"><span class="params">state</span> =&gt;</span> &#123; state.<span class="property">count</span>++ &#125; &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在根 Vue 实例中使用 store</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  store, <span class="comment">// 注入 store 到根组件</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-7-单向数据流"><a href="#3-7-单向数据流" class="headerlink" title="3.7 单向数据流"></a>3.7 <strong>单向数据流</strong></h3><ul><li><strong>概念</strong>：在 Vuex 中，数据流是单向的，从 state 到视图，然后通过 actions 到 mutations，最终更新 state。这种单向数据流使应用程序的状态管理变得可控和可预测。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue指令</title>
      <link href="/2023/10/31/2.%20Vue%E6%8C%87%E4%BB%A4/"/>
      <url>/2023/10/31/2.%20Vue%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="1-基础指令"><a href="#1-基础指令" class="headerlink" title="1. 基础指令"></a>1. 基础指令</h2><h3 id="1-1-条件渲染指令"><a href="#1-1-条件渲染指令" class="headerlink" title="1.1 条件渲染指令"></a>1.1 条件渲染指令</h3><p>这类指令用于根据条件动态地渲染或隐藏HTML元素。其中，最常用的指令是<code>v-else</code>、<code>v-if</code>和<code>v-show</code>。</p><ul><li><p>**<code>v-if</code>**根据表达式的值的真假，条件性地渲染或不渲染元素。当表达式的值为真时，元素会被渲染；否则，元素将不会被渲染。</p></li><li><p><code>v-show</code>根据表达式的值的真假，条件性地显示或隐藏元素。当表达式的值为真时，元素将被显示；否则，元素将被隐藏。与<code>v-if</code>不同的是，<code>v-show</code>指令不会在DOM树中添加或删除元素，只是根据条件决定元素的CSS属性display。</p></li></ul><blockquote><p>注：v-if会添加或删除Dom元素，不适用DOM元素频繁显示-关闭的场景。v-show不会添加删除Dom元素。</p></blockquote><h3 id="1-2-列表渲染指令"><a href="#1-2-列表渲染指令" class="headerlink" title="1.2 列表渲染指令"></a>1.2 列表渲染指令</h3><p>这类指令用于循环渲染HTML元素，通常用于渲染列表或表格。其中，最常用的指令是<code>v-for</code>。<code>v-for</code>用于在一个数组或对象上循环渲染元素。语法为<code>v-for=&quot;item in items&quot;</code>，其中<code>item</code>是当前循环的项，<code>items</code>是要循环的数组或对象。可以使用<code>v-for</code>的参数来控制循环输出。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;(index, item) in items&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">　　 <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">　　 …………</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h3 id="1-3-双向数据绑定指令（表单绑定指令）"><a href="#1-3-双向数据绑定指令（表单绑定指令）" class="headerlink" title="1.3 双向数据绑定指令（表单绑定指令）"></a>1.3 双向数据绑定指令（表单绑定指令）</h3><p>这类指令用于将表单元素的值与Vue实例中的数据<strong>双向绑定</strong>。其中，最常用的指令是<code>v-model</code>。<code>v-model</code>用于在表单元素和Vue实例中的数据之间建立双向绑定关系。例如，在一个文本输入框中，<code>v-model</code>可以将用户输入的值存储在Vue实例中的数据中，并且在Vue实例中的数据发生变化时，也会自动更新文本框的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model=<span class="string">&quot;text&quot;</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p>v-model指令的修饰符：</p><p><code>.trim</code>—删除文本首尾空格</p><p> <code>.number</code>—文本转数字</p></blockquote><h3 id="1-4-事件处理指令"><a href="#1-4-事件处理指令" class="headerlink" title="1.4 事件处理指令"></a>1.4 事件处理指令</h3><p>这类指令用于绑定HTML元素的事件，例如点击事件、键盘事件等。其中，最常用的指令是<code>v-on</code>。<code>v-on</code>用于绑定HTML元素的事件监听器，例如**<code>v-on:click</code>**用于监听元素的点击事件。当事件被触发时，绑定的方法将被调用。可以使用<code>v-on</code>的参数来指定要绑定的事件类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Vue.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">greet</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">// 方法中的 `this` 指向当前活跃的组件实例</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`Hello <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>!`</span>)</span><br><span class="line">    <span class="comment">// `event` 是 DOM 原生事件</span></span><br><span class="line">    <span class="keyword">if</span> (event) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(event.<span class="property">target</span>.<span class="property">tagName</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="string">`greet`</span> 是上面定义过的方法名 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;greet&quot;</span>&gt;</span>Greet<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>注：v-on:click可以简写为@click </p></blockquote><h3 id="1-5-属性绑定指令"><a href="#1-5-属性绑定指令" class="headerlink" title="1.5 属性绑定指令"></a>1.5 <strong>属性绑定指令</strong></h3><p>这类指令用于将HTML元素的属性与Vue实例中的数据绑定。其中，最常用的指令是<code>v-bind</code>。<code>v-bind</code>用于将HTML元素的属性与Vue实例中的数据绑定。例如，<code>v-bind:class=&quot;&#123;red: isRed&#125;&quot;</code>可以根据Vue实例中的<code>isRed</code>数据来动态地添加或删除<code>red</code>类。可以使用<code>v-bind</code>的参数来指定要绑定的属性。</p><blockquote><p>注：<code>v-bind:class</code>可以简写为<code>：class</code></p></blockquote><h2 id="2-自定义指令"><a href="#2-自定义指令" class="headerlink" title="2. 自定义指令"></a>2. 自定义指令</h2><p>Vue.js允许你创建自定义指令（Custom Directives），这些指令是在Vue模板中使用的特殊标记，用于对DOM元素进行操作、绑定事件、添加动画等。你可以根据项目的需求创建自定义指令，以扩展Vue的功能。以下是创建和使用自定义指令的一般步骤：</p><h3 id="2-1-全局自定义指令"><a href="#2-1-全局自定义指令" class="headerlink" title="2.1 全局自定义指令"></a>2.1 全局自定义指令</h3><p>你可以在Vue应用的入口文件（通常是<code>main.js</code>）中全局注册自定义指令。使用<code>Vue.directive</code>方法来创建全局指令，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个全局自定义指令 `v-highlight`</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;highlight&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 绑定时调用</span></span><br><span class="line">  <span class="title function_">bind</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">    <span class="comment">// 设置元素的背景颜色为指令的参数值</span></span><br><span class="line">    el.<span class="property">style</span>.<span class="property">backgroundColor</span> = binding.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-2-局部自定义指令"><a href="#2-2-局部自定义指令" class="headerlink" title="2.2 局部自定义指令"></a>2.2 局部自定义指令</h3><p>如果你只想在特定组件中使用自定义指令，你可以在组件的<code>directives</code>选项中注册指令。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p v-highlight=&quot;&#x27;yellow&#x27;&quot;&gt;这个段落被高亮了。&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  directives: &#123;</span><br><span class="line">    highlight: &#123;</span><br><span class="line">      bind(el, binding) &#123;</span><br><span class="line">        el.style.backgroundColor = binding.value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-3-使用自定义指令"><a href="#2-3-使用自定义指令" class="headerlink" title="2.3 使用自定义指令"></a>2.3 <strong>使用自定义指令</strong></h3><p>在模板中使用自定义指令时，你可以在指令名后面传递参数，如<code>v-highlight=&quot;&#39;yellow&#39;&quot;</code>，参数的值会被传递到指令的<code>bind</code>方法中。</p><h3 id="2-4-指令生命周期钩子"><a href="#2-4-指令生命周期钩子" class="headerlink" title="2.4 指令生命周期钩子"></a>2.4 指令生命周期钩子</h3><p>自定义指令可以定义生命周期钩子函数，用于在指令绑定时、元素更新时或解绑时执行特定操作。常用的钩子函数包括：</p><ul><li><code>bind</code>：指令绑定到元素时调用。</li><li><code>inserted</code>：元素插入到父节点时调用。</li><li><code>update</code>：元素及其子节点更新时调用。</li><li><code>componentUpdated</code>：组件及其子组件更新时调用。</li><li><code>unbind</code>：指令与元素解绑时调用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件</title>
      <link href="/2023/10/31/3.%20Vue%E7%BB%84%E4%BB%B6/"/>
      <url>/2023/10/31/3.%20Vue%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="1-单文件组件"><a href="#1-单文件组件" class="headerlink" title="1. 单文件组件"></a>1. 单文件组件</h2><p>在大多数启用了构建工具的 Vue 项目中，我们可以使用一种类似 HTML 格式的文件来书写 Vue 组件，它被称为<strong>单文件组件</strong> (也被称为 <code>*.vue</code> 文件，英文 Single-File Components，缩写为 <strong>SFC</strong>)。顾名思义，Vue 的单文件组件会将一个组件的逻辑 (JavaScript)，模板 (HTML) 和样式 (CSS) 封装在同一个文件里。下面我们将用单文件组件的格式重写计数器示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//逻辑</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模板</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>Count is: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//样式</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-tag">button</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">font-weight</span>: bold;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="2-组件选项"><a href="#2-组件选项" class="headerlink" title="2. 组件选项"></a>2. 组件选项</h2><p> Vue.js 组件中的一些常见属性和选项：</p><ol><li><strong>data</strong>：一个函数，返回包含组件内部数据的对象。这些数据在组件的模板中使用，用于渲染视图。</li><li><strong>computed</strong>：包含计算属性的对象，计算属性允许你根据已有的数据属性计算派生值。</li><li><strong>methods</strong>：包含组件方法的对象，可以在模板中触发。</li><li><strong>props</strong>：用于接收父组件传递的数据，定义组件的输入。</li><li><strong>propsData</strong>：用于测试，手动传递 props 数据。</li><li><strong>emits</strong>：定义组件的自定义事件。</li><li><strong>setup</strong>：用于 Composition API，提供组件的配置和响应式数据。</li><li><strong>components</strong>：包含局部注册的子组件。</li><li><strong>directives</strong>：包含局部注册的自定义指令。</li><li><strong>filters</strong>：包含局部注册的自定义过滤器。</li><li><strong>watch</strong>：用于观察数据的变化，执行相应的操作。</li><li><strong>mixins</strong>：包含混入（Mixins）对象的数组，用于共享组件选项。</li><li><strong>extends</strong>：用于继承另一个组件的选项。</li><li><strong>provide</strong> 和 <strong>inject</strong>：用于父子组件之间的依赖注入。</li><li><strong>inheritAttrs</strong>：控制是否将非props属性传递给根元素。</li><li><strong>name</strong>：定义组件的名称。</li><li><strong>model</strong>：配置 v-model 的默认行为。</li><li><strong>delimiters</strong>：自定义插值表达式的分隔符。</li><li><strong>comments</strong>：控制是否保留模板编译时的注释。</li><li><strong>functional</strong>：使组件无状态和无实例，通常用于函数式组件。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;task in tasks&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;task.id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;&#123; task.title &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addTask&quot;</span>&gt;</span>Add Task<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 组件的名称</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;TodoList&#x27;</span>, </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 父组件传递的属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">props</span>: &#123; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">title</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">initialTasks</span>: <span class="title class_">Array</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 组件内部数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">tasks</span>: <span class="variable language_">this</span>.<span class="property">initialTasks</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 计算属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">taskCount</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">tasks</span>.<span class="property">length</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 组件方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">addTask</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> newTask = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">taskCount</span> + <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">title</span>: <span class="string">`Task <span class="subst">$&#123;<span class="variable language_">this</span>.taskCount + <span class="number">1</span>&#125;</span>`</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">tasks</span>.<span class="title function_">push</span>(newTask);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="comment">// 观察数据变化</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">watch</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">tasks</span>(<span class="params">newTasks</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Tasks have changed:&#x27;</span>, newTasks);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 自定义指令</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">directives</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">focus</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">inserted</span>(<span class="params">el</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        el.<span class="title function_">focus</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">filters</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 自定义过滤器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">capitalize</span>(<span class="params">value</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> value.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + value.<span class="title function_">slice</span>(<span class="number">1</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 局部注册子组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">TaskItem</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;&#123;&#123; task.title | capitalize &#125;&#125;&lt;/div&gt;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">props</span>: [<span class="string">&#x27;task&#x27;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 配置v-model的默认行为</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">model</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">prop</span>: <span class="string">&#x27;checked&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">event</span>: <span class="string">&#x27;change&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="comment">// 提供依赖注入</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">provide</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">todoList</span>: <span class="variable language_">this</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-组件注册"><a href="#3-组件注册" class="headerlink" title="3. 组件注册"></a>3. 组件注册</h2><h3 id="3-1全局注册"><a href="#3-1全局注册" class="headerlink" title="3.1全局注册"></a>3.1全局注册</h3><p>我们可以使用 <a href="https://cn.vuejs.org/guide/essentials/application.html">Vue 应用实例</a>的 <strong><code>app.component()</code></strong> 方法，让组件在当前 Vue 应用中全局可用。全局注册的组件可以在此应用的任意组件的模板中使用。具体步骤如下：</p><ol><li>创建组件（XXX.vue文件）</li><li>Main.js文件中进行全局注册</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">component</span>(</span><br><span class="line">  <span class="comment">// 注册的名字</span></span><br><span class="line">  <span class="string">&#x27;MyComponent&#x27;</span>,</span><br><span class="line">  <span class="comment">// 组件的实现</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>如果使用单文件组件，你可以注册被导入的 <code>.vue</code> 文件：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">MyComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;MyComponent&#x27;</span>, <span class="title class_">MyComponent</span>)</span><br></pre></td></tr></table></figure><ul><li><code>app.component()</code> 方法可以被链式调用：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app</span><br><span class="line">  .<span class="title function_">component</span>(<span class="string">&#x27;ComponentA&#x27;</span>, <span class="title class_">ComponentA</span>)</span><br><span class="line">  .<span class="title function_">component</span>(<span class="string">&#x27;ComponentB&#x27;</span>, <span class="title class_">ComponentB</span>)</span><br><span class="line">  .<span class="title function_">component</span>(<span class="string">&#x27;ComponentC&#x27;</span>, <span class="title class_">ComponentC</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 这在当前应用的任意组件中都可用 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ComponentA</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ComponentB</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ComponentC</span>/&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>注：<strong>所有的子组件也可以使用全局注册的组件，这意味着这三个组件也都可以在<em>彼此内部</em>使用。</strong></p></blockquote><h3 id="3-2局部注册"><a href="#3-2局部注册" class="headerlink" title="3.2局部注册"></a>3.2局部注册</h3><p>全局注册虽然很方便，但有以下几个问题：</p><ol><li><p>全局注册，但并没有被使用的组件无法在生产打包时被自动移除 (也叫“tree-shaking”)。如果你全局注册了一个组件，即使它并没有被实际使用，它仍然会出现在打包后的 JS 文件中。</p></li><li><p>全局注册在大型项目中使项目的依赖关系变得不那么明确。在父组件中使用子组件时，不太容易定位子组件的实现。和使用过多的全局变量一样，这可能会影响应用长期的可维护性。</p></li></ol><p>相比之下，局部注册的组件需要在使用它的父组件中显式导入，并且只能在该父组件中使用。<strong>它的优点是使组件之间的依赖关系更加明确，并且对 tree-shaking 更加友好。</strong></p><p>局部注册需要使用 <code>components</code> 选项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">//1. 先引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ComponentA</span> <span class="keyword">from</span> <span class="string">&#x27;./ComponentA.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> <span class="comment">//2. 组件注册</span></span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">ComponentA</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  //3.使用组件</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">ComponentA</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>对于每个 <code>components</code> 对象里的属性，它们的 key 名就是注册的组件名，而值就是相应组件的实现。上面的例子中使用的是 ES2015 的缩写语法，等价于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">ComponentA</span>: <span class="title class_">ComponentA</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：<strong>局部注册的组件在后代组件中并不可用</strong>。在这个例zi中，<code>ComponentA</code> 注册后仅在当前组件可用，而在任何的子组件或更深层的子组件中都不可用。</p></blockquote><h2 id="4-组件通信"><a href="#4-组件通信" class="headerlink" title="4. 组件通信"></a>4. 组件通信</h2><h3 id="4-1-父子组件通信"><a href="#4-1-父子组件通信" class="headerlink" title="4.1 父子组件通信"></a>4.1 父子组件通信</h3><h4 id="4-1-1-父→子"><a href="#4-1-1-父→子" class="headerlink" title="4.1.1 父→子"></a>4.1.1 父→子</h4><p>父子组件通信是Vue.js中最常见的一种组件通信方式。父组件使用 <code>:message=&quot;parentMessage&quot;</code> 将数据传递给子组件。子组件通过 <code>props: [&quot;message&quot;]</code> 来接收这个数据，并在模板中显示它。父组件可以随时更新<code>parentMessage</code>的值，子组件将根据新的值进行更新。</p><ul><li><strong>父组件（ParentComponent.vue）：</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;父组件&lt;/h1&gt;</span><br><span class="line">    &lt;ChildComponent :message=&quot;parentMessage&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ChildComponent from &quot;./ChildComponent.vue&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    ChildComponent,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      parentMessage: &quot;这是来自父组件的消息&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>子组件（ChildComponent.vue）：</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;子组件&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&quot;message&quot;],</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="4-1-2-子→父"><a href="#4-1-2-子→父" class="headerlink" title="4.1.2 子→父"></a>4.1.2 子→父</h4><p>在Vue.js中，子组件向父组件传递数据通常使用自定义事件（Custom Events）来实现。这允许子组件触发事件，然后父组件可以监听这些事件并响应子组件的操作。以下是一个示例，演示如何在子组件中触发自定义事件并将数据传递给父组件：</p><ul><li><strong>子组件触发自定义事件（子组件）：</strong>子组件通过 <code>$emit</code> 方法触发名为 “custom-event” 的自定义事件，并将数据传递给父组件。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;sendDataToParent&quot;&gt;向父组件传递数据&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sendDataToParent() &#123;</span><br><span class="line">      const data = &quot;这是来自子组件的数据&quot;;</span><br><span class="line">      this.$emit(&quot;custom-event&quot;, data); // 触发自定义事件并传递数据</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>父组件监听自定义事件（父组件）：</strong>在父组件中，我们通过 <code>@custom-event=&quot;handleChildEvent&quot;</code> 监听子组件触发的自定义事件，并在事件触发时调用 <code>handleChildEvent</code> 方法来接收子组件传递的数据。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;父组件&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;从子组件接收的数据: &#123;&#123; receivedData &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;child-component @custom-event=&quot;handleChildEvent&quot;&gt;&lt;/child-component&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ChildComponent from &quot;./ChildComponent.vue&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    ChildComponent,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      receivedData: &quot;&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleChildEvent(data) &#123;</span><br><span class="line">      this.receivedData = data; // 处理来自子组件的数据</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="4-2-非父子组件通信"><a href="#4-2-非父子组件通信" class="headerlink" title="4.2 非父子组件通信"></a>4.2 非父子组件通信</h3><p>非父子组件通信通常需要<strong>一种全局状态管理的机制</strong>，以便不同组件之间能够共享数据和进行通信。Vue.js 提供了一些方式来实现非父子组件之间的通信，其中包括使用事件总线、Vuex（状态管理库）和 provide&#x2F;inject。下面我将介绍这些方式。</p><h4 id="4-2-1-事件总线-Event-Bus"><a href="#4-2-1-事件总线-Event-Bus" class="headerlink" title="4.2.1 事件总线 (Event Bus)"></a>4.2.1 <strong>事件总线 (Event Bus)</strong></h4><p>事件总线是一个Vue实例，你可以用它来触发和监听事件。创建一个事件总线，然后在需要通信的组件中使用 <code>$emit</code> 触发事件，并使用 <code>$on</code> 监听事件。</p><ul><li><strong>创建事件总线（event-bus.js）：</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">EventBus</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>();</span><br></pre></td></tr></table></figure><ul><li><strong>接收方组件</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听事件</span></span><br><span class="line"><span class="title class_">EventBus</span>.$on(<span class="string">&#x27;my-event&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 处理数据</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>发送方组件</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送事件</span></span><br><span class="line"><span class="title class_">EventBus</span>.$emit(<span class="string">&#x27;my-event&#x27;</span>, data);</span><br></pre></td></tr></table></figure><h4 id="4-2-2-provide-inject"><a href="#4-2-2-provide-inject" class="headerlink" title="4.2.2 provide&#x2F;inject"></a>4.2.2 <strong>provide&#x2F;inject</strong></h4><p>Vue 提供了 <code>provide</code> 和 <code>inject</code> 选项，允许祖先组件提供数据，然后后代组件使用 <code>inject</code> 来接收这些数据。这对于祖先和后代组件之间的通信非常有用。</p><ul><li><strong>祖先组件（provide-data.vue）：</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  provide() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      sharedData: &#x27;这是共享的数据&#x27;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>后代组件（consume-data.vue）：</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; sharedData &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  inject: [&#x27;sharedData&#x27;],</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="4-2-3-Vuex-状态管理库"><a href="#4-2-3-Vuex-状态管理库" class="headerlink" title="4.2.3 Vuex 状态管理库"></a>4.2.3 Vuex 状态管理库</h4><p> Vuex 是一个专门用于状态管理的库，允许你在整个应用程序中共享状态。你可以在任何组件中访问和修改状态，以及触发事件。它提供了一个中央存储，包括状态、mutations、actions和getters。</p><p>安装和配置 Vuex，然后在组件中使用 <code>this.$store</code> 访问状态和触发 mutations 和 actions。</p><h4 id="4-2-4-作用域插槽"><a href="#4-2-4-作用域插槽" class="headerlink" title="4.2.4 作用域插槽"></a>4.2.4 作用域插槽</h4><p>详见章节 5.3</p><h2 id="5-插槽"><a href="#5-插槽" class="headerlink" title="5. 插槽"></a>5. 插槽</h2><p>在Vue.js中，插槽（Slot）是一种用于在组件之间传递内容的机制，它允许你将内容插入到组件的特定位置。插槽是一种强大的抽象，它使得组件更加灵活和可重用，允许开发者在不同情况下自定义组件的外观和行为。</p><p>通过使用插槽，你可以将任何内容插入到组件中，使组件更加灵活和可定制。插槽是Vue.js组件化开发的一个关键特性，它有助于构建可重用的组件，同时允许开发者根据需要自定义组件的外观和内容。</p><h3 id="5-1-默认插槽"><a href="#5-1-默认插槽" class="headerlink" title="5.1 默认插槽"></a>5.1 <strong>默认插槽</strong></h3><p>默认插槽是组件中未命名的插槽，它用于插入未分配到任何具名插槽的内容。默认插槽通常用在组件的模板中，使用<code>&lt;slot&gt;&lt;/slot&gt;</code>标签定义。</p><ul><li><strong>子组件定义插槽：</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;默认插槽示例&lt;/h1&gt;</span><br><span class="line">    //插槽位置</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>父组件使用插槽：</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component&gt;</span><br><span class="line">  &lt;p&gt;This is the main content.&lt;/p&gt;</span><br><span class="line">&lt;/my-component&gt;</span><br></pre></td></tr></table></figure><h3 id="5-2-具名插槽"><a href="#5-2-具名插槽" class="headerlink" title="5.2 具名插槽"></a>5.2 具名插槽</h3><p>具名插槽是具有名称的插槽，允许你在父组件中选择性地将内容插入到组件的特定位置。具名插槽可以在父组件中使用<code>&lt;template v-slot:slotName&gt;&lt;/template&gt;</code>标签来定义。</p><ul><li><strong>子组件定义插槽：</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;具名插槽示例&lt;/h1&gt;</span><br><span class="line">    &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">      &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>在父组件中使用具名插槽</strong>：<code>template</code>标签配合<code>#插槽名</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component&gt;</span><br><span class="line">  &lt;template v-slot:header&gt;</span><br><span class="line">    &lt;h2&gt;This is the header&lt;/h2&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  &lt;p&gt;This is the main content.&lt;/p&gt;</span><br><span class="line">&lt;/my-component&gt;</span><br><span class="line"></span><br><span class="line">//简化写法</span><br><span class="line">&lt;my-component&gt;</span><br><span class="line">  &lt;template #header&gt;</span><br><span class="line">    &lt;h2&gt;This is the header&lt;/h2&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  &lt;p&gt;This is the main content.&lt;/p&gt;</span><br><span class="line">&lt;/my-component&gt;</span><br></pre></td></tr></table></figure><h3 id="5-3-作用域插槽"><a href="#5-3-作用域插槽" class="headerlink" title="5.3 作用域插槽"></a>5.3 作用域插槽</h3><p>通过插槽（Slot）传递值通常需要结合使用<strong>具名插槽</strong>和<strong>作用域插槽（Scoped Slot）</strong>。这使得在父组件中将数据传递到插槽中成为可能。以下是一个示例，演示如何通过插槽传递值。在这个示例中，组件A定义了一个具名插槽，用于传递消息。组件B使用了组件A，并在插槽中接收消息。组件B还包含了一个按钮，当点击按钮时，会调用一个方法来显示消息。</p><ul><li><strong>组件A定义具名插槽：</strong>组件A使用<code>:message=&quot;slotMessage&quot;</code>将数据绑定到插槽。默认插槽名为default。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;slot :message=&quot;slotMessage&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      slotMessage: &quot;这是组件A传递的消息&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>组件B接受插槽传递值：</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;组件B&lt;/h1&gt;</span><br><span class="line">    &lt;component-a&gt;</span><br><span class="line">      //默认插槽名为default</span><br><span class="line">      &lt;template v-slot:default=&quot;slotProps&quot;&gt;</span><br><span class="line">        &lt;p&gt;组件B收到的消息: &#123;&#123; slotProps.message &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;button @click=&quot;showMessage(slotProps.message)&quot;&gt;显示消息&lt;/button&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/component-a&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ComponentA from &quot;./ComponentA.vue&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    ComponentA,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    showMessage(message) &#123;</span><br><span class="line">      alert(message);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue生命周期</title>
      <link href="/2023/10/31/5.%20Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2023/10/31/5.%20Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Vue生命周期"><a href="#1-Vue生命周期" class="headerlink" title="1. Vue生命周期"></a>1. Vue生命周期</h2><img src="./picture/Untitled.png" alt="Untitled" style="zoom:50%;" /><h2 id="2-Vue生命周期函数"><a href="#2-Vue生命周期函数" class="headerlink" title="2. Vue生命周期函数"></a>2. Vue生命周期函数</h2><p>Vue.js 是一个流行的 JavaScript 框架，它有自己的生命周期钩子函数，允许你在组件不同生命周期阶段执行代码。Vue 组件的生命周期包括以下钩子函数：</p><ol><li><strong>beforeCreate</strong>：在实例被创建之前调用。此时组件的数据观察和事件配置都尚未初始化。</li><li>**&#x3D;&#x3D;created&#x3D;&#x3D;**：在实例被创建之后调用。在这个阶段，组件已经完成数据观察、属性和方法的运算，但尚未挂载到DOM。</li><li><strong>beforeMount</strong>：在挂载开始之前被调用。此时，模板编译已完成，但尚未将模板渲染到DOM中。</li><li>**&#x3D;&#x3D;mounted&#x3D;&#x3D;**：在挂载完成后调用。此时，组件已经被挂载到DOM中，可以访问DOM元素。</li><li><strong>beforeUpdate</strong>：在数据更新之前调用。当数据发生变化时，该钩子函数会在重新渲染之前被触发。</li><li><strong>updated</strong>：在数据更新完成后调用。组件已经重新渲染并应用了变化的数据。</li><li><strong>beforeDestroy</strong>：在组件销毁之前调用。可以在这个阶段进行一些清理工作，如清除定时器、取消订阅等。</li><li><strong>destroyed</strong>：在组件销毁后调用。此时，组件实例已经被销毁，所有的事件监听器和数据观察都已经被解绑。</li></ol><p>以下是一个简单的 Vue 组件示例，展示了这些生命周期钩子函数的执行顺序：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;Hello, Vue!&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">beforeCreate</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeCreate hook&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">created</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;created hook&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">beforeMount</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeMount hook&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mounted</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted hook&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">beforeUpdate</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeUpdate hook&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">updated</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;updated hook&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">beforeDestroy</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeDestroy hook&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">destroyed</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;destroyed hook&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当你创建一个 Vue 实例时，这些钩子函数会按照上述顺序被依次调用。你可以在这些钩子函数中执行特定的逻辑，以满足你的应用程序需求。例如，在 <code>mounted</code> 钩子中，你可以执行DOM操作或向后端服务器发送请求。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-router</title>
      <link href="/2023/10/31/7.%20Vue-router/"/>
      <url>/2023/10/31/7.%20Vue-router/</url>
      
        <content type="html"><![CDATA[<p>##1. 简介</p><blockquote><p>Vue Router（通常称为 vue-router）是Vue.js的官方路由管理库，用于实现前端路由。Vue Router使你能够创建单页面应用（SPA），将不同的组件与URL进行关联，以便用户在应用程序中导航。以下是Vue Router的基本</p></blockquote><h2 id="2-使用教程"><a href="#2-使用教程" class="headerlink" title="2. 使用教程"></a>2. 使用教程</h2><h4 id="步骤1-安装Vue-Router"><a href="#步骤1-安装Vue-Router" class="headerlink" title="步骤1: 安装Vue Router"></a>步骤1: 安装Vue Router</h4><p>首先，确保你的Vue.js项目已经安装了Vue Router。如果你是使用Vue CLI创建的项目，通常Vue Router会自动包含在项目中。如果没有，你可以通过以下方式进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router</span><br></pre></td></tr></table></figure><p>或者使用Yarn：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add vue-router</span><br></pre></td></tr></table></figure><h4 id="步骤2-创建路由配置"><a href="#步骤2-创建路由配置" class="headerlink" title="步骤2: 创建路由配置"></a>步骤2: 创建路由配置</h4><p>在你的项目中创建一个路由配置（route&#x2F;index.js），定义路由的路径和关联的组件。通常，你会将路由配置放在一个单独的文件中。以下是一个简单的路由配置示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/Home.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/About.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><h4 id="步骤3-关联Vue实例"><a href="#步骤3-关联Vue实例" class="headerlink" title="步骤3: 关联Vue实例"></a>步骤3: 关联Vue实例</h4><p>在你的Vue应用程序中，你需要将Vue Router与Vue实例关联，以便它能够控制你的应用的路由。通常，你会在主入口文件（例如<code>main.js</code>）中执行此操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  router, <span class="comment">// 将路由器与Vue实例关联</span></span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="步骤4-创建路由视图"><a href="#步骤4-创建路由视图" class="headerlink" title="步骤4: 创建路由视图"></a>步骤4: 创建路由视图</h4><p>在你的应用程序中，创建与路由关联的组件，并将它们渲染为路由视图。路由视图是在不同路由之间切换时显示的内容区域。你可以在Vue组件中使用 <code>&lt;router-view&gt;</code> 标签来显示路由视图。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- App.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="步骤5-创建导航链接"><a href="#步骤5-创建导航链接" class="headerlink" title="步骤5: 创建导航链接"></a>步骤5: 创建导航链接</h4><p>为了让用户能够导航到不同的路由，你可以创建导航链接。Vue Router提供了 <code>&lt;router-link&gt;</code> 组件，用于创建内部导航链接。以下是一个简单的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt;</span><br><span class="line">&lt;router-link to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><h4 id="步骤6-导航守卫"><a href="#步骤6-导航守卫" class="headerlink" title="步骤6: 导航守卫"></a>步骤6: 导航守卫</h4><p>Vue Router提供了导航守卫，你可以使用它们来添加路由导航的拦截和处理逻辑。你可以在路由配置中定义全局守卫、路由独享的守卫以及组件内的守卫。</p><p>以下是一个全局前置守卫的示例，它在每次路由切换前执行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 在每次路由切换前执行的逻辑</span></span><br><span class="line">  <span class="title function_">next</span>(); <span class="comment">// 一定要调用 next() 来继续路由导航</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这是一个简单的Vue Router使用教程，帮助你开始创建具有路由功能的Vue.js应用程序。根据你的项目需求，你可以添加更多高级功能，如嵌套路由、路由参数、路由懒加载等。请查阅Vue Router的官方文档以获取更多详细信息：<a href="https://router.vuejs.org/">Vue Router 官方文档</a>。</p><h2 id="3-嵌套路由"><a href="#3-嵌套路由" class="headerlink" title="3. 嵌套路由"></a>3. 嵌套路由</h2><blockquote><p>嵌套路由是一种在Vue Router中创建子路由的技术，允许你在一个父路由内嵌套多个子路由。这对于构建复杂的页面布局以及在不同的嵌套级别上组织组件非常有用。</p></blockquote><h3 id="步骤1：定义路由配置"><a href="#步骤1：定义路由配置" class="headerlink" title="步骤1：定义路由配置"></a>步骤1：定义路由配置</h3><p>首先，你需要在路由配置中定义父路由和子路由。父路由通常是页面的整体布局，而子路由用于在父路由内呈现不同的内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>, <span class="comment">// 父路由组件</span></span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 子路由的路径为空，作为默认子路由</span></span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Home</span>, <span class="comment">// 子路由组件</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 其他子路由</span></span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 其他路由配置</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="步骤2：创建路由视图组件"><a href="#步骤2：创建路由视图组件" class="headerlink" title="步骤2：创建路由视图组件"></a>步骤2：创建路由视图组件</h3><p>在父路由组件和子路由组件中，你需要创建Vue组件，以便在路由切换时呈现内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Layout.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;Layout&lt;/h1&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt; &lt;!-- 子路由组件将被渲染在这里 --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">vueCopy code</span><br><span class="line">&lt;!-- Home.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;Home Page&lt;/h2&gt;</span><br><span class="line">    &lt;!-- Home 页面内容 --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">vueCopy code</span><br><span class="line">&lt;!-- About.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;About Page&lt;/h2&gt;</span><br><span class="line">    &lt;!-- About 页面内容 --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="步骤3：设置路由链接"><a href="#步骤3：设置路由链接" class="headerlink" title="步骤3：设置路由链接"></a>步骤3：设置路由链接</h3><p>你可以使用 <code>&lt;router-link&gt;</code> 组件创建导航链接，以便用户可以导航到不同的子路由。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Layout.vue 或其他父路由组件 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt;</span><br><span class="line">&lt;router-link to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><h3 id="步骤4：导航到子路由"><a href="#步骤4：导航到子路由" class="headerlink" title="步骤4：导航到子路由"></a>步骤4：导航到子路由</h3><p>现在，当用户点击导航链接时，Vue Router将会根据路径切换到相应的子路由，该子路由将在父路由的 <code>&lt;router-view&gt;</code> 中呈现。</p><p>这就是嵌套路由的基本使用方法。你可以在父路由中定义更多的子路由，以构建复杂的页面布局和导航。请查阅Vue Router官方文档以了解更多关于嵌套路由的高级用法和选项：<a href="https://router.vuejs.org/guide/essentials/nested-routes.html">Vue Router 嵌套路由</a>。</p><h2 id="4-路由参数（声明式导航）"><a href="#4-路由参数（声明式导航）" class="headerlink" title="4. 路由参数（声明式导航）"></a>4. 路由参数（声明式导航）</h2><p>在Vue Router中，你可以使用不同的方式来传递参数，包括<strong>查询参数（Query Parameters）</strong>和<strong>动态路由（Dynamic Routing）</strong>。这两种方法都可以用于在路由之间传递数据，但适用于不同的使用场景。</p><p>查询参数适用于在URL中传递参数，适用于不同路由之间的通用参数。而动态路由适用于根据参数值定位到不同的路由，并在组件内部使用参数。选择哪种方式取决于你的项目需求。通常，<strong>查询参数</strong>更适合用于筛选、排序、分页等功能，而<strong>动态路由</strong>更适合用于页面间的导航和路由跳转。</p><h3 id="4-1-查询参数传参"><a href="#4-1-查询参数传参" class="headerlink" title="4.1 查询参数传参"></a>4.1 查询参数传参</h3><p>查询参数是附加在URL中的键值对，通常出现在URL的问号后面（例如：<code>http://example.com/route?param1=value1&amp;param2=value2</code>）。</p><ul><li><strong>传递查询参数：</strong></li></ul><p>使用 <code>&lt;router-link&gt;</code> 或编程方式导航时，你可以将查询参数附加到路由中。</p><p>使用 <code>&lt;router-link&gt;</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=&quot;&#123; path: &#x27;/route&#x27;, query: &#123; param1: &#x27;value1&#x27;, param2: &#x27;value2&#x27; &#125; &#125;&quot;&gt;Go to Route&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><p>或者，使用编程方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/route&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">param1</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="attr">param2</span>: <span class="string">&#x27;value2&#x27;</span> &#125; &#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>接收查询参数：</strong></li></ul><p>在目标组件中，你可以通过 <code>$route.query</code> 来访问查询参数的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;Param1: &#123;&#123; $route.query.param1 &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;Param2: &#123;&#123; $route.query.param2 &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="4-2-动态路由传参"><a href="#4-2-动态路由传参" class="headerlink" title="4.2 动态路由传参"></a>4.2 动态路由传参</h3><p>动态路由允许你在路由路径中包含参数，这些参数可以在路由匹配时传递到组件中。</p><ul><li><strong>定义动态路由：</strong>在路由配置中，你可以使用冒号 <code>:</code> 来定义动态参数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/route/:param1/:param2&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">YourComponent</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><ul><li><strong>传递动态参数：</strong>在使用 <code>&lt;router-link&gt;</code> 或编程方式导航时，你可以为动态参数提供相应的值。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=&quot;&#123; path: &#x27;/route/value1/value2&#x27; &#125;&quot;&gt;Go to Route&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><p>或者，使用编程方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/route/value1/value2&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>接收动态参数：</strong>在目标组件中，你可以通过 <code>$route.params</code> 来访问动态参数的值。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;Param1: &#123;&#123; $route.params.param1 &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;Param2: &#123;&#123; $route.params.param2 &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //在js中需要使用this关键字</span><br><span class="line">this.$route.params.param2</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>参数可选符</strong>：</li></ul><p>当我们使用动态路由传参时，如果路由中配置了参数，则我们必须要传递参数，否则就会出现显示空白的情况。若我们希望参数可以选择性传递，则需要在配置路由时添加参数可选符——“ ? “。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/route/:param1?&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">YourComponent</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="4-3-小结"><a href="#4-3-小结" class="headerlink" title="4.3 小结"></a>4.3 小结</h3><table><thead><tr><th align="left">方式</th><th>传递参数</th><th>接收参数</th><th>配置路由</th></tr></thead><tbody><tr><td align="left">查询参数传参</td><td>to &#x3D; “&#x2F;path?参数名&#x3D;值&amp;参数名&#x3D;值”</td><td>$route.query.参数名</td><td>无</td></tr><tr><td align="left">动态路由传参</td><td>to &#x3D; “&#x2F;path&#x2F;参数名”</td><td>$route.params.参数名</td><td>path:”&#x2F;path&#x2F;参数名”</td></tr></tbody></table><h2 id="5-路由重定向"><a href="#5-路由重定向" class="headerlink" title="5. 路由重定向"></a>5. 路由重定向</h2><p>路由重定向是一种Vue Router中的常见用法，它允许你在导航到某个路由时，自动将用户重定向到另一个路由。这可以用于多种情况，例如在用户访问某个路径时自动跳转到登录页、实现别名路由、或者重定向到默认页面等。</p><h3 id="5-1-使用-redirect-属性"><a href="#5-1-使用-redirect-属性" class="headerlink" title="5.1 使用 redirect 属性"></a>5.1 使用 <code>redirect</code> 属性</h3><p>在路由配置中，你可以为某个路由配置 <code>redirect</code> 属性，将其值设置为要重定向到的路由路径。这会将用户从一个路由自动导航到另一个路由。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/old-path&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/new-path&#x27;</span>, <span class="comment">// 将用户重定向到 /new-path</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 其他路由配置</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="5-2-使用命名路由"><a href="#5-2-使用命名路由" class="headerlink" title="5.2 使用命名路由"></a>5.2 使用命名路由</h3><p>如果你使用了命名路由，你可以在 <code>redirect</code> 属性中使用命名路由来执行重定向。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/old-path&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;new-route-name&#x27;</span> &#125;, <span class="comment">// 通过命名路由重定向</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 其他路由配置</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="5-3-使用函数"><a href="#5-3-使用函数" class="headerlink" title="5.3 使用函数"></a>5.3 使用函数</h3><p>你还可以在 <code>redirect</code> 属性中使用一个函数，以编程方式决定要重定向到的路由。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/old-path&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="function">(<span class="params">to</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 在这里编写逻辑，根据 to 对象来决定重定向的路由</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;/new-path&#x27;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 其他路由配置</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="5-4-路由别名"><a href="#5-4-路由别名" class="headerlink" title="5.4 路由别名"></a>5.4 路由别名</h3><p>Vue Router还提供了路由别名的功能，允许你将某个路由设置为另一个路由的别名，当用户访问别名路由时，实际上是访问了目标路由。这可以被认为是一种路由重定向，但更为简单。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/alias-path&#x27;</span>, <span class="comment">// 路由别名</span></span><br><span class="line">    <span class="attr">alias</span>: <span class="string">&#x27;/target-path&#x27;</span>, <span class="comment">// 设置别名为 /target-path</span></span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">SomeComponent</span>, <span class="comment">// 显示的组件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 其他路由配置</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>通过路由别名，用户可以访问 <code>/alias-path</code> 或 <code>/target-path</code>，它们将显示相同的组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/old-path&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/new-path&#x27;</span>, <span class="comment">// 将用户重定向到 /new-path</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 其他路由配置</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="6-编程式导航"><a href="#6-编程式导航" class="headerlink" title="6. 编程式导航"></a>6. 编程式导航</h2><h3 id="6-1-路由跳转"><a href="#6-1-路由跳转" class="headerlink" title="6.1 路由跳转"></a>6.1 路由跳转</h3><p>编程式导航是通过JavaScript代码来手动执行路由导航，通常使用 <code>$router</code> 对象的方法，如 <code>push</code>、<code>replace</code>、<code>go</code> 等。它通常用于以下情况：</p><ul><li>当你需要在响应事件、异步操作或特定逻辑之后手动执行路由导航。</li><li>当你需要传递参数、执行条件导航或在导航完成后执行额外的操作时。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">navigateToAboutPage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/about&#x27;</span>); <span class="comment">// 编程式导航到 About 页面</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//完整写法</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">navigateToAboutPage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;路由路径&#x27;</span></span><br><span class="line">    &#125;); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-路由传参"><a href="#6-2-路由传参" class="headerlink" title="6.2 路由传参"></a>6.2 路由传参</h3><ul><li><strong>使用 <code>params</code> 传递参数（动态路由传参）：</strong></li></ul><p>步骤1：<strong>在路由配置中定义动态路由</strong>：首先，需要在路由配置中定义一个带有动态参数的路由。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">javascriptCopy code</span><br><span class="line">const routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/user/:id&#x27;,</span><br><span class="line">    component: UserProfile,</span><br><span class="line">  &#125;,</span><br><span class="line">  // 其他路由配置</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>步骤2：执行编程式导航并传递参数**：使用 <code>$router.push()</code> 方法来执行编程式导航，并在其中传递参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/user/123&#x27;</span> &#125;); <span class="comment">// 传递参数，将用户ID设置为123</span></span><br></pre></td></tr></table></figure><p>步骤3：<strong>接收参数的组件中访问参数</strong>：在目标组件中，你可以通过 <code>$route.params</code> 来访问传递的参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;User ID: &#123;&#123; $route.params.id &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>使用 <code>query</code> 传递参数（查询参数传参）：</strong></li></ul><p><strong>步骤1：执行编程式导航并传递参数</strong>：使用 <code>$router.push()</code> 方法来执行编程式导航，并在其中传递参数作为查询参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; </span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>, </span><br><span class="line">  <span class="attr">query</span>: &#123; <span class="attr">id</span>: <span class="number">123</span> &#125; </span><br><span class="line">&#125;); <span class="comment">// 传递参数，将用户ID设置为123</span></span><br></pre></td></tr></table></figure><p><strong>步骤2：在接收参数的组件中访问参数</strong>：在目标组件中，你可以通过 <code>$route.query</code> 来访问传递的查询参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;User ID: &#123;&#123; $route.query.id &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>这是两种使用编程式导航传递参数的常见方法。你可以根据你的需求和路由配置选择其中一种方式。一般来说，使用 <code>params</code> 适用于将参数嵌入到URL中，而使用 <code>query</code> 适用于更灵活的参数传递，例如在表单提交后传递数据。如果需要更多复杂的参数传递，你还可以结合这两种方法来使用。</p><h2 id="7-路由懒加载"><a href="#7-路由懒加载" class="headerlink" title="7. 路由懒加载"></a>7. 路由懒加载</h2><p>路由懒加载（Route Lazy Loading）是一种优化Vue.js应用性能的技术。通过路由懒加载，你可以延迟加载你的路由组件，<strong>只在用户访问特定路由时才加载相关的代码</strong>。这可以减小初始加载的包大小，加快应用的初始加载速度，特别是对于大型单页应用（SPA）来说非常有用。在Vue.js中，你可以使用以下方法实现路由懒加载：</p><h3 id="7-1-使用动态导入（Dynamic-Import）"><a href="#7-1-使用动态导入（Dynamic-Import）" class="headerlink" title="7.1 使用动态导入（Dynamic Import）"></a>7.1 使用动态导入（Dynamic Import）</h3><p>动态导入是ECMAScript的一部分，它允许你按需加载模块。在Vue.js中，你可以结合Webpack的动态导入来实现路由懒加载。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&#x27;./views/Home.vue&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">About</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&#x27;./views/About.vue&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这里的<code>import</code>语句会将路由组件按需加载，只有在用户访问相关路由时才加载相应的组件。</p><h3 id="7-2-使用Webpack的require-ensure"><a href="#7-2-使用Webpack的require-ensure" class="headerlink" title="7.2 使用Webpack的require.ensure"></a>7.2 使用Webpack的require.ensure</h3><p>在较早的Vue.js版本中，你可以使用Webpack的<code>require.ensure</code>来实现路由懒加载。不过，现代Vue.js项目通常更推荐使用动态导入。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = resolve =&gt; <span class="built_in">require</span>.<span class="title function_">ensure</span>([], <span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="built_in">require</span>(<span class="string">&#x27;./views/Home.vue&#x27;</span>)));</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">About</span> = resolve =&gt; <span class="built_in">require</span>.<span class="title function_">ensure</span>([], <span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="built_in">require</span>(<span class="string">&#x27;./views/About.vue&#x27;</span>)));</span><br></pre></td></tr></table></figure><p>无论你选择哪种方法，路由懒加载的效果是一样的，即在用户访问相关路由时才加载相应的路由组件。这可以显著减小初始加载的包大小，提高应用的性能。确保你的应用使用现代构建工具（如Webpack）以及Vue Router的支持，以便轻松实现路由懒加载。</p><h2 id="8-导航守卫"><a href="#8-导航守卫" class="headerlink" title="8. 导航守卫"></a>8. 导航守卫</h2><p>当使用 Vue Router 来管理路由的时候，导航守卫允许你在路由切换的不同阶段执行特定操作。下面将更详细地介绍导航守卫的使用和用途：</p><h3 id="8-1-全局前置守卫-beforeEach-："><a href="#8-1-全局前置守卫-beforeEach-：" class="headerlink" title="8.1 全局前置守卫 (beforeEach)："></a>8.1 全局前置守卫 (<code>beforeEach</code>)：</h3><ul><li>全局前置守卫是在路由切换前执行的，通常用于进行身份验证和权限检查。</li><li>你可以在 <code>router</code> 对象上使用 <code>beforeEach</code> 钩子，以全局方式应用于所有路由。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">requiresAuth</span> &amp;&amp; !userIsAuthenticated) &#123;</span><br><span class="line">    <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>); <span class="comment">// 重定向到登录页</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>(); <span class="comment">// 允许继续导航</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="8-2-全局解析守卫-beforeResolve-："><a href="#8-2-全局解析守卫-beforeResolve-：" class="headerlink" title="8.2 全局解析守卫 (beforeResolve)：**"></a>8.2 全局解析守卫 (<code>beforeResolve</code>)：**</h3><ul><li>全局解析守卫在导航成功被确认之前执行，常用于等待异步操作的完成。</li><li><code>beforeResolve</code> 钩子在全局前置守卫之后、路由组件渲染之前执行。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeResolve</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 在导航成功前执行一些操作</span></span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="8-3-全局后置守卫-afterEach-："><a href="#8-3-全局后置守卫-afterEach-：" class="headerlink" title="8.3 全局后置守卫 (afterEach)："></a>8.3 全局后置守卫 (<code>afterEach</code>)：</h3><ul><li>全局后置守卫在路由导航完成后执行，通常用于执行一些全局操作，如日志记录或分析。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">javascriptCopy code</span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 在路由导航完成后执行操作</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="8-4-路由独享的守卫："><a href="#8-4-路由独享的守卫：" class="headerlink" title="8.4 路由独享的守卫："></a>8.4 路由独享的守卫：</h3><ul><li>你可以在路由配置中设置 <code>beforeEnter</code> 来指定只在特定路由上执行的守卫。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> adminRoute = &#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/admin&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">AdminComponent</span>,</span><br><span class="line">  <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (userIsAdmin) &#123;</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&#x27;/access-denied&#x27;</span>); <span class="comment">// 重定向到拒绝访问页</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-5-组件内的守卫-beforeRouteEnter-beforeRouteUpdate-beforeRouteLeave-："><a href="#8-5-组件内的守卫-beforeRouteEnter-beforeRouteUpdate-beforeRouteLeave-：" class="headerlink" title="8.5 组件内的守卫 (beforeRouteEnter, beforeRouteUpdate, beforeRouteLeave)：**"></a>8.5 组件内的守卫 (<code>beforeRouteEnter</code>, <code>beforeRouteUpdate</code>, <code>beforeRouteLeave</code>)：**</h3><ul><li>组件内的守卫允许你在组件生命周期中定义特定的路由导航逻辑。</li><li><code>beforeRouteEnter</code> 在路由进入组件前执行，但此时组件实例还未被创建。</li><li><code>beforeRouteUpdate</code> 在路由参数变化时执行。</li><li><code>beforeRouteLeave</code> 在组件离开前执行。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MyComponent</span> = &#123;</span><br><span class="line">  <span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">    <span class="comment">// 在组件进入前执行，但组件实例还未创建</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeRouteUpdate</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">    <span class="comment">// 路由参数变化时执行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">    <span class="comment">// 在组件离开前执行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导航守卫是非常有用的工具，用于控制路由的行为，实现身份验证、权限控制和其他路由导航逻辑。你可以根据应用程序的需求，在不同阶段执行特定的操作来实现自定义的路由控制逻辑。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-resource</title>
      <link href="/2023/10/31/8.%20Vue-resource/"/>
      <url>/2023/10/31/8.%20Vue-resource/</url>
      
        <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p><code>vue-resource</code> 是 Vue.js 官方推出的 HTTP 请求库，用于发起 AJAX 请求、处理响应和与后端API进行通信。然而，自 Vue.js 2.0 版本起，&#x3D;&#x3D;<strong>Vue 官方推荐使用 <code>axios</code> 或 <code>Fetch API</code> 来代替 <code>vue-resource</code>，因此 <code>vue-resource</code> 已经不再维护，新项目应该尽量避免使用它。</strong>&#x3D;&#x3D;</p><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><ol><li><p>首先，确保你已经在项目中安装了 <code>vue-resource</code>，你可以使用 <code>npm</code> 或 <code>yarn</code> 安装它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-resource</span><br></pre></td></tr></table></figure></li><li><p>在你的Vue项目中，你需要将 <code>vue-resource</code> 引入并注册为Vue插件。这通常在入口文件（例如 <code>main.js</code>）中完成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueResource</span> <span class="keyword">from</span> <span class="string">&#x27;vue-resource&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueResource</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接下来，你可以在Vue组件中使用VueResource</span></span><br></pre></td></tr></table></figure></li><li><p>现在你可以在Vue组件中使用 <code>this.$http</code> 发起HTTP请求，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">&#x27;/api/data&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理成功的响应</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">body</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理错误</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li></ol><p><code>vue-resource</code> 提供了各种HTTP请求方法，包括 <code>get</code>、<code>post</code>、<code>put</code>、<code>delete</code> 等，以及一些拦截器和请求&#x2F;响应的拦截功能。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>API请求和数据交互</title>
      <link href="/2023/10/31/9.%20API%E8%AF%B7%E6%B1%82%E5%92%8C%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92/"/>
      <url>/2023/10/31/9.%20API%E8%AF%B7%E6%B1%82%E5%92%8C%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Axios"><a href="#1-Axios" class="headerlink" title="1. Axios"></a>1. Axios</h2><p>Axios 是一个流行的基于 Promise 的 HTTP 客户端库，用于进行网络请求。它提供了一种简单而强大的方式来执行 HTTP 请求，支持浏览器和Node.js环境。</p><p>Axios 提供了丰富的功能，包括处理请求和响应的拦截、取消请求、处理文件上传等。它是一个功能强大而易于使用的工具，适用于多种前端项目，特别是在 Vue.js 项目中进行 API 请求和数据交互。</p><h3 id="1-1-安装和引入-Axios"><a href="#1-1-安装和引入-Axios" class="headerlink" title="1.1 安装和引入 Axios"></a>1.1 安装和引入 Axios</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//使用npm下载</span><br><span class="line">npm install axios</span><br><span class="line"></span><br><span class="line">//使用yarn下载</span><br><span class="line">yarn add axios</span><br><span class="line"></span><br><span class="line">//在 Vue 组件或 JavaScript 文件中引入 Axios：</span><br><span class="line">import axios from <span class="string">&#x27;axios&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="1-2-发起-GET-请求"><a href="#1-2-发起-GET-请求" class="headerlink" title="1.2 发起 GET 请求"></a>1.2 发起 GET 请求</h3><p>使用 Axios 发起 GET 请求，以下是一个示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/api/data&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理成功的响应</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理错误</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>在上述示例中，<code>axios.get</code> 方法返回一个 Promise，你可以使用 <code>.then()</code> 处理成功的响应，并使用 <code>.catch()</code> 处理错误。</p><h3 id="1-3-发起-POST-请求"><a href="#1-3-发起-POST-请求" class="headerlink" title="1.3 发起 POST 请求"></a>1.3 发起 POST 请求</h3><p>使用 Axios 发起 POST 请求，以下是一个示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;exampleUser&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;examplePassword&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/api/login&#x27;</span>, data)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理成功的响应</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理错误</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>在 POST 请求中，你可以提供数据对象，并使用 <code>.post</code> 方法指定请求的 URL。</p><h3 id="1-4-Axios-拦截器和全局配置"><a href="#1-4-Axios-拦截器和全局配置" class="headerlink" title="1.4 Axios 拦截器和全局配置"></a>1.4 <strong>Axios 拦截器和全局配置</strong></h3><p>Axios 允许你设置全局的请求拦截器和响应拦截器，以便在请求和响应时执行特定操作。这对于添加身份验证标头、处理响应数据、或执行其他全局操作非常有用。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 在请求发送前可以做一些处理</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求正在发送...&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 在请求完成后可以对响应进行处理</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应已收到。&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="2-Fetch-API"><a href="#2-Fetch-API" class="headerlink" title="2. Fetch API"></a>2. Fetch API</h2><p>Fetch API 是现代 JavaScript 的内置方法，用于进行网络请求。它是一种原生的、基于 Promise 的方法，用于获取数据和与远程服务器通信。以下是如何使用 Fetch API 发起 GET 请求的示例：</p><h3 id="2-1-发起-GET-请求"><a href="#2-1-发起-GET-请求" class="headerlink" title="2.1 发起 GET 请求"></a>2.1 发起 GET 请求</h3><p>使用 Fetch API 发起 GET 请求，以下是一个示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;/api/data&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;网络错误&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>(); <span class="comment">// 将响应解析为 JSON</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 成功处理数据</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理错误</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>上述示例中，<code>fetch</code> 方法返回一个 Promise，你可以使用 <code>.then()</code> 处理成功的响应，并使用 <code>.catch()</code> 处理错误。</p><h3 id="2-2-发起-POST-请求"><a href="#2-2-发起-POST-请求" class="headerlink" title="2.2 发起 POST 请求"></a>2.2 发起 POST 请求</h3><p>使用 Fetch API 发起 POST 请求，以下是一个示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;exampleUser&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;examplePassword&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;/api/login&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, <span class="comment">// 请求方法</span></span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> <span class="comment">// 请求头信息</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data) <span class="comment">// 请求体数据</span></span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;网络错误&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理成功的响应</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理错误</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>在 POST 请求中，你可以提供数据对象，并使用 <code>.fetch</code> 方法指定请求的 URL，请求方法，请求头信息和请求体数据。Fetch API 具有 <code>.json()</code> 方法，用于解析 JSON 响应数据。你也可以使用 <code>.text()</code>、<code>.blob()</code> 等方法来处理其他类型的响应。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue工程化开发</title>
      <link href="/2023/10/31/6.%20Vue%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%BC%80%E5%8F%91/"/>
      <url>/2023/10/31/6.%20Vue%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Vue安装和项目创建"><a href="#1-Vue安装和项目创建" class="headerlink" title="1. Vue安装和项目创建"></a>1. Vue安装和项目创建</h2><blockquote><p>注：这个过程使用Vue CLI，<strong>确保已安装Node.js和npm。</strong></p></blockquote><h3 id="步骤1：安装Vue-CLI"><a href="#步骤1：安装Vue-CLI" class="headerlink" title="步骤1：安装Vue CLI"></a>步骤1：安装Vue CLI</h3><p>首先，你需要全局安装Vue CLI。打开终端并运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><h3 id="步骤2：创建Vue项目"><a href="#步骤2：创建Vue项目" class="headerlink" title="步骤2：创建Vue项目"></a>步骤2：创建Vue项目</h3><p>Vue CLI将提示你选择一个预设配置或手动配置项目。选择一个预设配置，或使用箭头键和回车键进行手动配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create my-vue-app</span><br></pre></td></tr></table></figure><h3 id="步骤3：项目配置"><a href="#步骤3：项目配置" class="headerlink" title="步骤3：项目配置"></a>步骤3：项目配置</h3><p>如果你选择手动配置，你将需要配置一些选项，例如Babel、ESLint、预处理器等。根据你的项目需求进行选择，或使用默认配置。Vue CLI将显示一系列可配置的特性。使用箭头键和回车键来选择和配置这些特性，例如：</p><ul><li><strong>Babel</strong>：用于将ES6+语法编译成浏览器可识别的JavaScript。</li><li><strong>TypeScript</strong>：如果你想在项目中使用TypeScript。</li><li><strong>ESLint</strong>：用于代码规范检查。</li><li><strong>Unit Testing</strong>：如果你希望添加单元测试。</li><li><strong>E2E Testing</strong>：如果你希望添加端到端测试。</li><li><strong>Router</strong>：用于Vue Router的支持。</li><li><strong>Vuex</strong>：用于状态管理的支持。</li><li>等等…</li></ul><h3 id="步骤4：依赖安装"><a href="#步骤4：依赖安装" class="headerlink" title="步骤4：依赖安装"></a>步骤4：依赖安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="步骤5：启动服务器"><a href="#步骤5：启动服务器" class="headerlink" title="步骤5：启动服务器"></a>步骤5：启动服务器</h3><ol><li><p><strong>进入项目目录</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-vue-app</span><br></pre></td></tr></table></figure></li><li><p><strong>启动开发服务器</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p>开发服务器将运行，并你将看到一个本地服务器地址（通常是<code>http://localhost:8080/</code>）。在浏览器中打开此地址以查看你的Vue应用。</p></li></ol><h3 id="步骤6：开发项目"><a href="#步骤6：开发项目" class="headerlink" title="步骤6：开发项目"></a>步骤6：开发项目</h3><p>现在你可以开始开发项目。Vue CLI已为你生成一个基本的Vue.js应用，你可以在<code>src/</code>目录中找到主要的应用代码。</p><h3 id="步骤7：构建项目"><a href="#步骤7：构建项目" class="headerlink" title="步骤7：构建项目"></a>步骤7：构建项目</h3><p>当项目完成时，你可以使用以下命令来构建生产版本的项目：这将生成一个<code>dist</code>目录，其中包含用于生产部署的优化文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><h3 id="步骤8：部署项目"><a href="#步骤8：部署项目" class="headerlink" title="步骤8：部署项目"></a>步骤8：<strong>部署项目</strong></h3><p>将<code>dist</code>目录中的文件部署到Web服务器或静态文件托管服务上，以使你的Vue应用在生产环境中运行。</p><h2 id="2-Vue项目架构"><a href="#2-Vue项目架构" class="headerlink" title="2. Vue项目架构"></a>2. Vue项目架构</h2><p>Vue.js项目通常遵循一种标准的项目结构，以确保项目的组织、可维护性和可扩展性。以下是一个常见的Vue项目结构示例：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">my-vue-app/</span><br><span class="line">|<span class="comment">-- public/</span></span><br><span class="line">|   |<span class="comment">-- index.html           # 应用入口HTML文件</span></span><br><span class="line">|   |<span class="comment">-- favicon.ico          # 网站图标</span></span><br><span class="line">|<span class="comment">-- src/</span></span><br><span class="line">|   |<span class="comment">-- assets/              # 静态资源文件，如图片、样式表</span></span><br><span class="line">|   |<span class="comment">-- components/          # 可复用的Vue组件</span></span><br><span class="line">|   |<span class="comment">-- views/               # 页面级别的Vue组件</span></span><br><span class="line">|   |<span class="comment">-- router/              # Vue Router配置文件</span></span><br><span class="line">|   |<span class="comment">-- store/               # Vuex状态管理文件</span></span><br><span class="line">|   |<span class="comment">-- api/                 # API请求封装</span></span><br><span class="line">|   |<span class="comment">-- utils/               # 工具函数、辅助类</span></span><br><span class="line">|   |<span class="comment">-- mixins/              # 全局混入</span></span><br><span class="line">|   |<span class="comment">-- directives/          # 自定义指令</span></span><br><span class="line">|   |<span class="comment">-- filters/             # 过滤器</span></span><br><span class="line">|   |<span class="comment">-- plugins/             # 第三方插件或库</span></span><br><span class="line">|   |<span class="comment">-- styles/              # 全局样式文件</span></span><br><span class="line">|   |<span class="comment">-- main.js              # 应用入口JavaScript文件</span></span><br><span class="line">|   |<span class="comment">-- App.vue              # 应用的主组件</span></span><br><span class="line">|<span class="comment">-- tests/                   # 测试文件</span></span><br><span class="line">|<span class="comment">-- package.json             # 项目依赖和配置</span></span><br><span class="line">|<span class="comment">-- babel.config.js          # Babel配置文件</span></span><br><span class="line">|<span class="comment">-- vue.config.js            # Vue CLI配置文件</span></span><br><span class="line">|<span class="comment">-- .eslintrc.js             # ESLint配置文件</span></span><br><span class="line">|<span class="comment">-- README.md                # 项目文档</span></span><br></pre></td></tr></table></figure><ol><li>**public&#x2F;**：这个目录包含不需要经过构建处理的静态资源文件，如<code>index.html</code>、网站图标等。</li><li>**src&#x2F;**：这是主要的项目源代码目录，包括组件、视图、路由、状态管理等。具体如下：<ul><li>**assets&#x2F;**：用于存放项目的静态资源文件，如图片、样式表等。</li><li>**components&#x2F;**：包含可复用的Vue组件，可以在不同页面中使用。</li><li>**views&#x2F;**：页面级别的Vue组件，通常与路由相关。</li><li>**router&#x2F;**：Vue Router的配置文件，用于设置路由规则。</li><li>**store&#x2F;**：Vuex状态管理文件，用于全局状态管理。</li><li><strong>main.js</strong>：应用的入口JavaScript文件，初始化Vue应用并配置Vue插件等。</li><li><strong>App.vue：</strong> 文件通常包含了应用的整体结构、布局和样式，同时也可以包含一些全局的组件和逻辑。这个文件在项目的入口处被引入并渲染，因此是整个Vue应用的主要入口点。</li></ul></li><li>**tests&#x2F;**：包含测试文件和配置，用于单元测试和端到端测试。</li><li><strong>node_modules&#x2F;：</strong>这是项目依赖的第三方库的存储位置，通常由npm或Yarn管理。</li><li><strong>package-lock.json：</strong>这个文件用于锁定项目依赖库的版本，确保项目在不同环境中拥有相同的依赖版本。</li><li><strong>package.json</strong>：项目依赖和配置文件，包含项目所需的依赖库、脚本命令等。</li><li><strong>babel.config.js</strong>：Babel的配置文件，用于编译JavaScript代码。</li><li><strong>vue.config.js</strong>：Vue CLI的配置文件，用于自定义Vue应用的构建和开发环境配置。</li><li><strong>.eslintrc.js</strong>：ESLint的配置文件，用于代码规范检查和静态分析。</li><li><strong>README.md</strong>：项目文档，包含项目的简介、安装、运行指南等信息。</li></ol><h2 id="3-Vue脚手架（vue-cli）"><a href="#3-Vue脚手架（vue-cli）" class="headerlink" title="3. Vue脚手架（vue-cli）"></a>3. Vue脚手架（vue-cli）</h2>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/10/19/4.%20Vue%E7%89%B9%E6%80%A7/"/>
      <url>/2023/10/19/4.%20Vue%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue简介</title>
      <link href="/2023/10/12/Vue%E7%AE%80%E4%BB%8B/"/>
      <url>/2023/10/12/Vue%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h1><blockquote><p><strong>声明式渲染</strong>：只告诉程序想要什么结果，如何达成由程序保证，开发者不用关心。不用操作DOM，直接更新数据<br><strong>声明式渲染好处</strong>：<br>比如在vue中，只需定义好展示数据，并把它放在 template中 合适的位置。</p></blockquote><blockquote><p><strong>命令式渲染</strong>：一步一步告诉程序怎么做，能否达成结果取决于开发者的设计。<br>而命令式渲染，如果 DOM 发生变化，js 代码也需要做相应的改变，耦合度很强。<br>而重绘非常耗费性能。JS操作Dom，常常频繁地触发重绘。但是如果把更新 DOM 的操作交给 Vue、React 去做，让 Virtual DOM 发挥作用，可有效提高页面性能。</p></blockquote><p><img src="/../picture/%E5%88%9B%E5%BB%BAvue%E5%AE%9E%E4%BE%8B.png" alt="Vue"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用指令</title>
      <link href="/2023/07/25/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2023/07/25/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基本操作指令"><a href="#一、基本操作指令" class="headerlink" title="一、基本操作指令"></a>一、<strong>基本操作指令</strong></h2><p><code>git init</code>：初始化一个新的Git仓库。</p><p><code>git add &lt;filename&gt;</code>：将文件添加到Git索引中。</p><p><code>git commit -m &quot;Commit message&quot;</code>：提交更改，并附上提交消息。</p><p><code>git status</code>：查看当前Git仓库的状态。</p><h2 id="二、分支管理指令"><a href="#二、分支管理指令" class="headerlink" title="二、分支管理指令"></a>二、<strong>分支管理指令</strong></h2><p><code>git branch</code>：列出所有分支。</p><p><code>git branch &lt;branchname&gt;</code>：创建一个新的分支。</p><p><code>git branch -d &lt;branchname&gt;</code>：删除指定的分支。</p><p><code>git branch -a</code>：列出本地和远程所有分支。</p><p><code>git branch -m &lt;oldbranchname&gt; &lt;newbranchname&gt;</code>：将指定的分支重命名。</p><p><code>git checkout &lt;branchname&gt;</code>：切换到指定的分支。</p><p><code>git checkout -b &lt;branchname&gt;</code>：创建一个新的分支，并切换到该分支。</p><p><code>git merge &lt;branchname&gt;</code>：将指定分支合并到当前分支。</p><p><code>git push &lt;remote&gt; &lt;branch&gt;</code>：将本地分支推送到远程分支。</p><p><code>git push &lt;remote&gt; :&lt;branchname&gt;</code>：删除远程分支。</p><p><code>git pull &lt;remote&gt; &lt;branch&gt;</code>：从远程分支拉取代码并合并到当前分支。</p><h2 id="三、远程仓库指令"><a href="#三、远程仓库指令" class="headerlink" title="三、远程仓库指令"></a>三、<strong>远程仓库指令</strong></h2><p><code>git clone &lt;repository&gt;</code>：从远程仓库克隆整个代码库到本地。</p><p><code>git remote add &lt;name&gt; &lt;url&gt;</code>：将本地代码库与远程仓库进行关联。</p><p><code>git remote -v</code>：显示所有已经与本地仓库关联的远程仓库信息。</p><p><code>git fetch &lt;remote&gt;</code>：从远程仓库拉取最新的代码到本地，但不会自动合并。</p><p><code>git pull &lt;remote&gt; &lt;branch&gt;</code>：从远程仓库拉取最新的代码到本地，并自动合并到当前分支。</p><p><code>git push &lt;remote&gt; &lt;branch&gt;</code>：将本地的代码推送到远程仓库指定分支。</p><p><code>git remote show &lt;remote&gt;</code>：显示指定远程仓库的详细信息，包括分支和标签等。</p><p><code>git remote rename &lt;oldname&gt; &lt;newname&gt;</code>：将已经存在的远程仓库别名进行重命名。</p><p><code>git remote remove &lt;name&gt;</code>：删除指定名称的远程仓库关联。</p><h2 id="四、撤销操作指令"><a href="#四、撤销操作指令" class="headerlink" title="四、撤销操作指令"></a>四、<strong>撤销操作指令</strong></h2><p>在Git中，撤销操作包括撤销已提交的修改、撤销已经暂存的修改和取消已经执行的Git命令等。以下是一些常用的Git撤销操作指令：</p><p><code>git checkout &lt;file&gt;</code>：将指定文件恢复到上一次提交的状态，也可以使用 <code>git checkout .</code> 恢复所有文件。<br><code>git reset &lt;file&gt;</code>：将指定文件恢复到上一次未暂存的状态，也可以使用 <code>git reset</code> 恢复所有文件。<br><code>git reset HEAD &lt;file&gt;</code>：将指定文件从已暂存的状态中恢复到未暂存的状态。<br><code>git revert &lt;commit&gt;</code>：撤销指定的提交，生成一个新的提交以恢复先前的状态。<br><code>git stash</code>：将当前的修改暂存起来，以便稍后恢复。<br><code>git stash pop</code>：将最近一次暂存的修改还原回来，并将暂存的修改从堆栈中移除。<br><code>git cherry-pick &lt;commit&gt;</code>：将指定的提交合并到当前分支中。<br><code>git commit --amend</code>：修改上一次提交的信息</p><h2 id="五、查看日志指令"><a href="#五、查看日志指令" class="headerlink" title="五、查看日志指令"></a>五、<strong>查看日志指令</strong></h2><p><code>git log</code>：查看Git仓库的提交历史。</p><p><code>git diff</code>：查看文件的变更记录。</p><p><code>git log --graph</code>：查看分支历史记录的图形表示。</p><h2 id="六、其他操作指令"><a href="#六、其他操作指令" class="headerlink" title="六、其他操作指令"></a>六、<strong>其他操作指令</strong></h2><p><code>.gitignore</code>：忽略不需要跟踪的文件。</p><p><code>git tag &lt;tagname&gt;</code>：创建一个新的标签。</p><p><code>git stash</code>：将未提交的更改保存到一个临时的存储区，以便稍后恢复。</p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git基础教程</title>
      <link href="/2023/07/25/git%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
      <url>/2023/07/25/git%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="一、安装-Git"><a href="#一、安装-Git" class="headerlink" title="一、安装 Git"></a>一、安装 Git</h2><p>首先，您需要安装 Git。您可以从官方网站<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> 下载安装程序，然后按照安装向导完成安装过程。</p><p><strong>初始化仓库</strong></p><p>要开始使用 Git，您需要在您的计算机上创建一个 Git 仓库。要初始化一个新的 Git 仓库，请在命令行中导航到您的项目目录并运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>这将在当前目录下创建一个新的 Git 仓库。</p><h2 id="二、添加和提交文件"><a href="#二、添加和提交文件" class="headerlink" title="二、添加和提交文件"></a>二、<strong>添加和提交文件</strong></h2><p>一旦您的 Git 仓库被初始化，您可以将文件添加到 Git 中。要添加文件，请运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>要提交添加的文件，请运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;message&quot;</span></span><br></pre></td></tr></table></figure><p>在提交时，您需要提供提交消息，以便其他开发人员了解您所做的更改。</p><h2 id="三、查看历史记录"><a href="#三、查看历史记录" class="headerlink" title="三、查看历史记录"></a>三、<strong>查看历史记录</strong></h2><p>要查看 Git 仓库的历史记录，请运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>这将显示所有提交的历史记录，包括每个提交的作者，提交日期和提交消息。</p><h2 id="四、分支管理"><a href="#四、分支管理" class="headerlink" title="四、分支管理"></a>四、<strong>分支管理</strong></h2><p>Git 还允许您创建和管理分支。分支是一个从主分支派生的副本，您可以在其中进行修改，而不会影响主分支。要创建分支，请运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;branchname&gt;</span><br></pre></td></tr></table></figure><p>要切换到新分支，请运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branchname&gt;</span><br></pre></td></tr></table></figure><p>在您完成对分支的更改后，您可以将其合并回主分支。要将分支合并到主分支，请运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branchname&gt;</span><br></pre></td></tr></table></figure><p>这将把您对分支所做的更改合并到主分支中。</p><h2 id="五、远程仓库"><a href="#五、远程仓库" class="headerlink" title="五、远程仓库"></a>五、<strong>远程仓库</strong></h2><p>最后，您可能需要将 Git 仓库与远程仓库（如 GitHub）同步。要将您的本地仓库上传到远程仓库，请运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin &lt;remote repository URL&gt;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>这将把您的本地仓库与远程仓库同步，并将您的更改上传到远程仓库中。</p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git概述</title>
      <link href="/2023/07/25/git%E6%A6%82%E8%BF%B0/"/>
      <url>/2023/07/25/git%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、四个工作区域"><a href="#一、四个工作区域" class="headerlink" title="一、四个工作区域"></a>一、<strong>四个工作区域</strong></h2><p>在Git中，有四个不同的工作区域，分别是工作区（Working Directory）、暂存区（Index）、本地仓库（Local Repository）和远程仓库（Remote Repository）。</p><p><strong>工作区（Working Directory</strong>）：指项目所在的目录，也就是用户直接进行文件修改和操作的地方。在工作区中可以进行任意修改、添加、删除等操作，但这些修改不会被记录到Git仓库中。</p><p><strong>暂存区（Index）</strong>：暂存区是Git仓库中的一个虚拟区域，用于暂存将要提交的修改。通过 <code>git add</code> 命令将工作区中的修改添加到暂存区中，表示这些修改已经准备好被提交了。暂存区的目的是为了提供更加灵活的提交方式，允许用户将修改分成多个提交，以便更好地管理和控制项目的版本。</p><p><strong>本地仓库（Local Repository）</strong>：本地仓库是存储着项目历史记录的数据库，包括了所有版本的提交和分支等信息。每个本地仓库都包含一个 <code>.git</code> 目录，该目录包含了所有的Git元数据，如对象库、分支、标签等信息。</p><p><strong>远程仓库（Remote Repository）</strong>：远程仓库是存储着项目的一个备份，通常位于网络上的其他计算机或服务器上。远程仓库可以通过 <code>git clone</code> 命令进行克隆，或者通过 <code>git remote</code> 命令进行连接和管理。远程仓库允许多人协作开发同一个项目，通过推送（push）和拉取（pull）操作，可以在本地仓库和远程仓库之间进行同步。</p><p>这四个工作区域在Git中扮演着不同的角色和功能，通过它们的配合，可以实现对项目的版本控制、协作开发和代码管理等功能。</p><p><img src="/../picture/pic2.png" alt="Git的四个工作区域"></p><h2 id="二、五种状态"><a href="#二、五种状态" class="headerlink" title="二、五种状态"></a>二、<strong>五种状态</strong></h2><p>在Git中，一个文件可以处于以下5种状态之一：</p><p>未跟踪（Untracked）：文件没有被Git追踪，即没有在Git的版本控制下。</p><p>已修改（Modified）：文件已经被修改，但还没有被添加到Git的暂存区。</p><p>已暂存（Staged）：文件已经被添加到Git的暂存区，等待被提交到Git仓库中。</p><p>已提交（Committed）：文件已经被提交到Git仓库中，即已经保存到Git的历史记录中。</p><p>已忽略（Ignored）：文件被添加到了.gitignore文件中，Git会忽略这些文件，不会被追踪或提交到Git仓库中。</p><p>通过 <code>git status</code> 命令可以查看当前工作目录下文件的状态，以及跟踪和未跟踪的文件列表。根据文件的状态，可以使用不同的Git命令进行相应的操作，如 <code>git add</code> 将文件添加到暂存区，<code>git commit</code> 将文件提交到仓库中，<code>git rm</code> 删除文件等。</p><p><img src="/../picture/pic1.png" alt="文件的五种状态"></p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP</title>
      <link href="/2023/07/25/AOP/"/>
      <url>/2023/07/25/AOP/</url>
      
        <content type="html"><![CDATA[<h2 id="一、什么是AOP"><a href="#一、什么是AOP" class="headerlink" title="一、什么是AOP"></a>一、什么是AOP</h2><blockquote><p><strong>AOP</strong>（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。</p></blockquote><blockquote><p>AOP技术恰恰相反，它利用一种称为”横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为”Aspect”，即切面。所谓”切面”，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。</p></blockquote><blockquote><p>使用”横切”技术，AOP把软件系统分为两个部分：<strong>核心关注点</strong>和<strong>横切关注点</strong>。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如权限认证、日志、事物。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。</p></blockquote><h2 id="二、核心概念"><a href="#二、核心概念" class="headerlink" title="二、核心概念"></a>二、核心概念</h2><h3 id="1-横切关注点"><a href="#1-横切关注点" class="headerlink" title="1. 横切关注点"></a>1. 横切关注点</h3><p><strong>对哪些方法进行拦截</strong>,拦截后怎么处理，这些关注点称之为横切关注点</p><h3 id="2-切面（aspect）"><a href="#2-切面（aspect）" class="headerlink" title="2. 切面（aspect）"></a>2. 切面（aspect）</h3><p>（自定义Log类）将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为”Aspect”，即切面。例如打印日志。</p><h3 id="3-连接点（joinpoint）"><a href="#3-连接点（joinpoint）" class="headerlink" title="3. 连接点（joinpoint）"></a>3. 连接点（joinpoint）</h3><p>被拦截到的点，因为Spring只支持方法类型的连接点，所以<strong>在Spring中连接点指的就是被拦截到的方法</strong>，实际上连接点还可以是字段或者构造器</p><h3 id="4-切入点（pointcut）"><a href="#4-切入点（pointcut）" class="headerlink" title="4. 切入点（pointcut）"></a>4. 切入点（pointcut）</h3><p>（需要打印Log的类）对连接点进行拦截的定义</p><h3 id="5-通知（advice）"><a href="#5-通知（advice）" class="headerlink" title="5. 通知（advice）"></a>5. 通知（advice）</h3><p>（Log类中的具体方法）所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类</p><h3 id="6-目标对象"><a href="#6-目标对象" class="headerlink" title="6. 目标对象"></a>6. 目标对象</h3><p>代理的目标对象</p><h3 id="7-织入（weave）"><a href="#7-织入（weave）" class="headerlink" title="7. 织入（weave）"></a>7. 织入（weave）</h3><p><strong>将切面应用到目标对象并导致代理对象创建的过程</strong></p><h3 id="8-引入（introduction）"><a href="#8-引入（introduction）" class="headerlink" title="8. 引入（introduction）"></a>8. 引入（introduction）</h3><p>在不修改代码的前提下，引入可以在<strong>运行期</strong>为类动态地添加一些方法或字段</p><h2 id="三、具体实现"><a href="#三、具体实现" class="headerlink" title="三、具体实现"></a>三、具体实现</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、配置切面、切入点、通知"><a href="#四、配置切面、切入点、通知" class="headerlink" title="四、配置切面、切入点、通知"></a>四、配置切面、切入点、通知</h2><h4 id="1-通过spring-xml配置"><a href="#1-通过spring-xml配置" class="headerlink" title="1. 通过spring.xml配置"></a>1. 通过spring.xml配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeLog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogBefore</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;====Before====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogAfter</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====After=====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;timeLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;log.TimeLog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--定义切面为TimeLog--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;timeLog&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--定义切入点为UserServiceImpl中的所有方法--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut1&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--定义前置通知为TimeLog.printLogBefore()方法--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;printLogBefore&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut1&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--定义后置通知为TimeLog.printLogAfter()方法--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;printLogAfter&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-通过注解将类定义为切面"><a href="#2-通过注解将类定义为切面" class="headerlink" title="2. 通过注解将类定义为切面"></a>2. 通过注解将类定义为切面</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式2</span></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationLog</span>  &#123;</span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(* service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeLog</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;beforeLog&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After(value = &quot;execution(* service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterLog</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterLog&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-通过实现接口定义通知的类型-xml配置"><a href="#3-通过实现接口定义通知的类型-xml配置" class="headerlink" title="3. 通过实现接口定义通知的类型 + xml配置"></a>3. 通过实现接口定义通知的类型 + xml配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.aop.MethodBeforeAdvice;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PreLog</span> <span class="keyword">implements</span> <span class="title class_">MethodBeforeAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是log：&quot;</span>+method.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;preLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;log.PreLog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点：要执行log的地方--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pre&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--执行什么方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;preLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pre&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue简介</title>
      <link href="/2023/07/25/1.%20Vue%E7%AE%80%E4%BB%8B/"/>
      <url>/2023/07/25/1.%20Vue%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="学习大纲"><a href="#学习大纲" class="headerlink" title="学习大纲"></a>学习大纲</h2><img src="../picture/Vue.png" alt="Vue" style="zoom: 40%;" /><h2 id="1-什么是Vue？"><a href="#1-什么是Vue？" class="headerlink" title="1. 什么是Vue？"></a>1. 什么是Vue？</h2><blockquote><p>Vue (发音为 &#x2F;vjuː&#x2F;，类似 <strong>view</strong>) 是一款用于构建用户界面的 <strong>JavaScript 框架</strong>。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。</p></blockquote><h2 id="2-Vue特点"><a href="#2-Vue特点" class="headerlink" title="2. Vue特点"></a>2. Vue特点</h2><ul><li><p><strong>javaScript框架</strong></p></li><li><p><strong>声明式渲染</strong>：Vue 基于标准 HTML 拓展了一套模板语法，使得我们可以声明式地描述最终输出的 HTML 和 JavaScript 状态之间的关系。</p></li><li><p><strong>响应性</strong>：Vue 会自动跟踪 JavaScript 状态并在其发生变化时响应式地更新 DOM。</p></li></ul><h2 id="3-API风格"><a href="#3-API风格" class="headerlink" title="3. API风格"></a>3. API风格</h2><p>Vue 的组件可以按两种不同的风格书写：<strong>选项式 API</strong> 和<strong>组合式 API</strong>。</p><h3 id="3-1-选项式API"><a href="#3-1-选项式API" class="headerlink" title="3.1 选项式API"></a>3.1 选项式API</h3><blockquote><p>使用选项式 API，我们可以用包含多个选项的对象来描述组件的逻辑，例如 <code>data</code>、<code>methods</code> 和 <code>mounted</code>。选项所定义的属性都会暴露在函数内部的 <code>this</code> 上，它会指向当前的组件实例。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// data() 返回的属性将会成为响应式的状态</span></span><br><span class="line">  <span class="comment">// 并且暴露在 `this` 上</span></span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// methods 是一些用来更改状态与触发更新的函数</span></span><br><span class="line">  <span class="comment">// 它们可以在模板中作为事件处理器绑定</span></span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生命周期钩子会在组件生命周期的各个不同阶段被调用</span></span><br><span class="line">  <span class="comment">// 例如这个函数就会在组件挂载完成后被调用</span></span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`The initial count is <span class="subst">$&#123;<span class="variable language_">this</span>.count&#125;</span>.`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>Count is: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="3-2-组合式API"><a href="#3-2-组合式API" class="headerlink" title="3.2 组合式API"></a>3.2 组合式API</h3><blockquote><p>通过组合式 API，我们可以使用导入的 API 函数来描述组件逻辑。在单文件组件中，组合式 API 通常会与**<code>script setup</code>** 搭配使用。这个 <strong><code>setup</code></strong> attribute 是一个标识，告诉 Vue 需要在编译时进行一些处理，让我们可以更简洁地使用组合式 API。比如，**<code>&lt;script setup&gt;</code>** 中的导入和顶层变量&#x2F;函数都能够在模板中直接使用。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应式状态</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用来修改状态、触发更新的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">  count.<span class="property">value</span>++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生命周期钩子</span></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`The initial count is <span class="subst">$&#123;count.value&#125;</span>.`</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>Count is: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
